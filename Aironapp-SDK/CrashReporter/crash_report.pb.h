// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrashReporter/crash_report.proto

#ifndef PROTOBUF_CrashReporter_2fcrash_5freport_2eproto__INCLUDED
#define PROTOBUF_CrashReporter_2fcrash_5freport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace plcrash {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();

class CrashReport;
class CrashReport_Processor;
class CrashReport_SystemInfo;
class CrashReport_ApplicationInfo;
class CrashReport_Thread;
class CrashReport_Thread_StackFrame;
class CrashReport_Thread_RegisterValue;
class CrashReport_BinaryImage;
class CrashReport_Exception;
class CrashReport_Signal;
class CrashReport_ProcessInfo;
class CrashReport_MachineInfo;

enum CrashReport_Processor_TypeEncoding {
  CrashReport_Processor_TypeEncoding_TYPE_ENCODING_UNKNOWN = 0,
  CrashReport_Processor_TypeEncoding_TYPE_ENCODING_MACH = 1
};
bool CrashReport_Processor_TypeEncoding_IsValid(int value);
const CrashReport_Processor_TypeEncoding CrashReport_Processor_TypeEncoding_TypeEncoding_MIN = CrashReport_Processor_TypeEncoding_TYPE_ENCODING_UNKNOWN;
const CrashReport_Processor_TypeEncoding CrashReport_Processor_TypeEncoding_TypeEncoding_MAX = CrashReport_Processor_TypeEncoding_TYPE_ENCODING_MACH;
const int CrashReport_Processor_TypeEncoding_TypeEncoding_ARRAYSIZE = CrashReport_Processor_TypeEncoding_TypeEncoding_MAX + 1;

const ::google::protobuf::EnumDescriptor* CrashReport_Processor_TypeEncoding_descriptor();
inline const ::std::string& CrashReport_Processor_TypeEncoding_Name(CrashReport_Processor_TypeEncoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrashReport_Processor_TypeEncoding_descriptor(), value);
}
inline bool CrashReport_Processor_TypeEncoding_Parse(
    const ::std::string& name, CrashReport_Processor_TypeEncoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrashReport_Processor_TypeEncoding>(
    CrashReport_Processor_TypeEncoding_descriptor(), name, value);
}
enum CrashReport_SystemInfo_OperatingSystem {
  CrashReport_SystemInfo_OperatingSystem_MAC_OS_X = 0,
  CrashReport_SystemInfo_OperatingSystem_IPHONE_OS = 1,
  CrashReport_SystemInfo_OperatingSystem_IPHONE_SIMULATOR = 2,
  CrashReport_SystemInfo_OperatingSystem_OS_UNKNOWN = 3
};
bool CrashReport_SystemInfo_OperatingSystem_IsValid(int value);
const CrashReport_SystemInfo_OperatingSystem CrashReport_SystemInfo_OperatingSystem_OperatingSystem_MIN = CrashReport_SystemInfo_OperatingSystem_MAC_OS_X;
const CrashReport_SystemInfo_OperatingSystem CrashReport_SystemInfo_OperatingSystem_OperatingSystem_MAX = CrashReport_SystemInfo_OperatingSystem_OS_UNKNOWN;
const int CrashReport_SystemInfo_OperatingSystem_OperatingSystem_ARRAYSIZE = CrashReport_SystemInfo_OperatingSystem_OperatingSystem_MAX + 1;

const ::google::protobuf::EnumDescriptor* CrashReport_SystemInfo_OperatingSystem_descriptor();
inline const ::std::string& CrashReport_SystemInfo_OperatingSystem_Name(CrashReport_SystemInfo_OperatingSystem value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrashReport_SystemInfo_OperatingSystem_descriptor(), value);
}
inline bool CrashReport_SystemInfo_OperatingSystem_Parse(
    const ::std::string& name, CrashReport_SystemInfo_OperatingSystem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrashReport_SystemInfo_OperatingSystem>(
    CrashReport_SystemInfo_OperatingSystem_descriptor(), name, value);
}
enum Architecture {
  X86_32 = 0,
  X86_64 = 1,
  ARMV6 = 2,
  PPC = 3,
  PPC64 = 4,
  ARMV7 = 5,
  ARMV7s = 6,
  ARCHITECTURE_UNKNOWN = 7
};
bool Architecture_IsValid(int value);
const Architecture Architecture_MIN = X86_32;
const Architecture Architecture_MAX = ARCHITECTURE_UNKNOWN;
const int Architecture_ARRAYSIZE = Architecture_MAX + 1;

const ::google::protobuf::EnumDescriptor* Architecture_descriptor();
inline const ::std::string& Architecture_Name(Architecture value) {
  return ::google::protobuf::internal::NameOfEnum(
    Architecture_descriptor(), value);
}
inline bool Architecture_Parse(
    const ::std::string& name, Architecture* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Architecture>(
    Architecture_descriptor(), name, value);
}
// ===================================================================

class CrashReport_Processor : public ::google::protobuf::Message {
 public:
  CrashReport_Processor();
  virtual ~CrashReport_Processor();
  
  CrashReport_Processor(const CrashReport_Processor& from);
  
  inline CrashReport_Processor& operator=(const CrashReport_Processor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_Processor& default_instance();
  
  void Swap(CrashReport_Processor* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_Processor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_Processor& from);
  void MergeFrom(const CrashReport_Processor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CrashReport_Processor_TypeEncoding TypeEncoding;
  static const TypeEncoding TYPE_ENCODING_UNKNOWN = CrashReport_Processor_TypeEncoding_TYPE_ENCODING_UNKNOWN;
  static const TypeEncoding TYPE_ENCODING_MACH = CrashReport_Processor_TypeEncoding_TYPE_ENCODING_MACH;
  static inline bool TypeEncoding_IsValid(int value) {
    return CrashReport_Processor_TypeEncoding_IsValid(value);
  }
  static const TypeEncoding TypeEncoding_MIN =
    CrashReport_Processor_TypeEncoding_TypeEncoding_MIN;
  static const TypeEncoding TypeEncoding_MAX =
    CrashReport_Processor_TypeEncoding_TypeEncoding_MAX;
  static const int TypeEncoding_ARRAYSIZE =
    CrashReport_Processor_TypeEncoding_TypeEncoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TypeEncoding_descriptor() {
    return CrashReport_Processor_TypeEncoding_descriptor();
  }
  static inline const ::std::string& TypeEncoding_Name(TypeEncoding value) {
    return CrashReport_Processor_TypeEncoding_Name(value);
  }
  static inline bool TypeEncoding_Parse(const ::std::string& name,
      TypeEncoding* value) {
    return CrashReport_Processor_TypeEncoding_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .plcrash.CrashReport.Processor.TypeEncoding encoding = 1 [default = TYPE_ENCODING_UNKNOWN];
  inline bool has_encoding() const;
  inline void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  inline ::plcrash::CrashReport_Processor_TypeEncoding encoding() const;
  inline void set_encoding(::plcrash::CrashReport_Processor_TypeEncoding value);
  
  // required uint64 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint64 type() const;
  inline void set_type(::google::protobuf::uint64 value);
  
  // required uint64 subtype = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubtypeFieldNumber = 3;
  inline ::google::protobuf::uint64 subtype() const;
  inline void set_subtype(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.Processor)
 private:
  inline void set_has_encoding();
  inline void clear_has_encoding();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 type_;
  ::google::protobuf::uint64 subtype_;
  int encoding_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_Processor* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport_SystemInfo : public ::google::protobuf::Message {
 public:
  CrashReport_SystemInfo();
  virtual ~CrashReport_SystemInfo();
  
  CrashReport_SystemInfo(const CrashReport_SystemInfo& from);
  
  inline CrashReport_SystemInfo& operator=(const CrashReport_SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_SystemInfo& default_instance();
  
  void Swap(CrashReport_SystemInfo* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_SystemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_SystemInfo& from);
  void MergeFrom(const CrashReport_SystemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CrashReport_SystemInfo_OperatingSystem OperatingSystem;
  static const OperatingSystem MAC_OS_X = CrashReport_SystemInfo_OperatingSystem_MAC_OS_X;
  static const OperatingSystem IPHONE_OS = CrashReport_SystemInfo_OperatingSystem_IPHONE_OS;
  static const OperatingSystem IPHONE_SIMULATOR = CrashReport_SystemInfo_OperatingSystem_IPHONE_SIMULATOR;
  static const OperatingSystem OS_UNKNOWN = CrashReport_SystemInfo_OperatingSystem_OS_UNKNOWN;
  static inline bool OperatingSystem_IsValid(int value) {
    return CrashReport_SystemInfo_OperatingSystem_IsValid(value);
  }
  static const OperatingSystem OperatingSystem_MIN =
    CrashReport_SystemInfo_OperatingSystem_OperatingSystem_MIN;
  static const OperatingSystem OperatingSystem_MAX =
    CrashReport_SystemInfo_OperatingSystem_OperatingSystem_MAX;
  static const int OperatingSystem_ARRAYSIZE =
    CrashReport_SystemInfo_OperatingSystem_OperatingSystem_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperatingSystem_descriptor() {
    return CrashReport_SystemInfo_OperatingSystem_descriptor();
  }
  static inline const ::std::string& OperatingSystem_Name(OperatingSystem value) {
    return CrashReport_SystemInfo_OperatingSystem_Name(value);
  }
  static inline bool OperatingSystem_Parse(const ::std::string& name,
      OperatingSystem* value) {
    return CrashReport_SystemInfo_OperatingSystem_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .plcrash.CrashReport.SystemInfo.OperatingSystem operating_system = 1 [default = OS_UNKNOWN];
  inline bool has_operating_system() const;
  inline void clear_operating_system();
  static const int kOperatingSystemFieldNumber = 1;
  inline ::plcrash::CrashReport_SystemInfo_OperatingSystem operating_system() const;
  inline void set_operating_system(::plcrash::CrashReport_SystemInfo_OperatingSystem value);
  
  // required string os_version = 2;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 2;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  
  // required .plcrash.Architecture architecture = 3 [default = ARCHITECTURE_UNKNOWN];
  inline bool has_architecture() const;
  inline void clear_architecture();
  static const int kArchitectureFieldNumber = 3;
  inline plcrash::Architecture architecture() const;
  inline void set_architecture(plcrash::Architecture value);
  
  // required int64 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // optional string os_build = 5;
  inline bool has_os_build() const;
  inline void clear_os_build();
  static const int kOsBuildFieldNumber = 5;
  inline const ::std::string& os_build() const;
  inline void set_os_build(const ::std::string& value);
  inline void set_os_build(const char* value);
  inline void set_os_build(const char* value, size_t size);
  inline ::std::string* mutable_os_build();
  inline ::std::string* release_os_build();
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.SystemInfo)
 private:
  inline void set_has_operating_system();
  inline void clear_has_operating_system();
  inline void set_has_os_version();
  inline void clear_has_os_version();
  inline void set_has_architecture();
  inline void clear_has_architecture();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_os_build();
  inline void clear_has_os_build();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* os_version_;
  int operating_system_;
  int architecture_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* os_build_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_SystemInfo* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport_ApplicationInfo : public ::google::protobuf::Message {
 public:
  CrashReport_ApplicationInfo();
  virtual ~CrashReport_ApplicationInfo();
  
  CrashReport_ApplicationInfo(const CrashReport_ApplicationInfo& from);
  
  inline CrashReport_ApplicationInfo& operator=(const CrashReport_ApplicationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_ApplicationInfo& default_instance();
  
  void Swap(CrashReport_ApplicationInfo* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_ApplicationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_ApplicationInfo& from);
  void MergeFrom(const CrashReport_ApplicationInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  
  // required string version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.ApplicationInfo)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_version();
  inline void clear_has_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* identifier_;
  ::std::string* version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_ApplicationInfo* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport_Thread_StackFrame : public ::google::protobuf::Message {
 public:
  CrashReport_Thread_StackFrame();
  virtual ~CrashReport_Thread_StackFrame();
  
  CrashReport_Thread_StackFrame(const CrashReport_Thread_StackFrame& from);
  
  inline CrashReport_Thread_StackFrame& operator=(const CrashReport_Thread_StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_Thread_StackFrame& default_instance();
  
  void Swap(CrashReport_Thread_StackFrame* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_Thread_StackFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_Thread_StackFrame& from);
  void MergeFrom(const CrashReport_Thread_StackFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 pc = 3;
  inline bool has_pc() const;
  inline void clear_pc();
  static const int kPcFieldNumber = 3;
  inline ::google::protobuf::uint64 pc() const;
  inline void set_pc(::google::protobuf::uint64 value);
  
  // optional string symbol = 4;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 4;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.Thread.StackFrame)
 private:
  inline void set_has_pc();
  inline void clear_has_pc();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 pc_;
  ::std::string* symbol_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_Thread_StackFrame* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport_Thread_RegisterValue : public ::google::protobuf::Message {
 public:
  CrashReport_Thread_RegisterValue();
  virtual ~CrashReport_Thread_RegisterValue();
  
  CrashReport_Thread_RegisterValue(const CrashReport_Thread_RegisterValue& from);
  
  inline CrashReport_Thread_RegisterValue& operator=(const CrashReport_Thread_RegisterValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_Thread_RegisterValue& default_instance();
  
  void Swap(CrashReport_Thread_RegisterValue* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_Thread_RegisterValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_Thread_RegisterValue& from);
  void MergeFrom(const CrashReport_Thread_RegisterValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.Thread.RegisterValue)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_Thread_RegisterValue* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport_Thread : public ::google::protobuf::Message {
 public:
  CrashReport_Thread();
  virtual ~CrashReport_Thread();
  
  CrashReport_Thread(const CrashReport_Thread& from);
  
  inline CrashReport_Thread& operator=(const CrashReport_Thread& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_Thread& default_instance();
  
  void Swap(CrashReport_Thread* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_Thread* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_Thread& from);
  void MergeFrom(const CrashReport_Thread& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CrashReport_Thread_StackFrame StackFrame;
  typedef CrashReport_Thread_RegisterValue RegisterValue;
  
  // accessors -------------------------------------------------------
  
  // required uint32 thread_number = 1;
  inline bool has_thread_number() const;
  inline void clear_thread_number();
  static const int kThreadNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 thread_number() const;
  inline void set_thread_number(::google::protobuf::uint32 value);
  
  // repeated .plcrash.CrashReport.Thread.StackFrame frames = 2;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 2;
  inline const ::plcrash::CrashReport_Thread_StackFrame& frames(int index) const;
  inline ::plcrash::CrashReport_Thread_StackFrame* mutable_frames(int index);
  inline ::plcrash::CrashReport_Thread_StackFrame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_StackFrame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_StackFrame >*
      mutable_frames();
  
  // required bool crashed = 3;
  inline bool has_crashed() const;
  inline void clear_crashed();
  static const int kCrashedFieldNumber = 3;
  inline bool crashed() const;
  inline void set_crashed(bool value);
  
  // repeated .plcrash.CrashReport.Thread.RegisterValue registers = 4;
  inline int registers_size() const;
  inline void clear_registers();
  static const int kRegistersFieldNumber = 4;
  inline const ::plcrash::CrashReport_Thread_RegisterValue& registers(int index) const;
  inline ::plcrash::CrashReport_Thread_RegisterValue* mutable_registers(int index);
  inline ::plcrash::CrashReport_Thread_RegisterValue* add_registers();
  inline const ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_RegisterValue >&
      registers() const;
  inline ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_RegisterValue >*
      mutable_registers();
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.Thread)
 private:
  inline void set_has_thread_number();
  inline void clear_has_thread_number();
  inline void set_has_crashed();
  inline void clear_has_crashed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_StackFrame > frames_;
  ::google::protobuf::uint32 thread_number_;
  bool crashed_;
  ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_RegisterValue > registers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_Thread* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport_BinaryImage : public ::google::protobuf::Message {
 public:
  CrashReport_BinaryImage();
  virtual ~CrashReport_BinaryImage();
  
  CrashReport_BinaryImage(const CrashReport_BinaryImage& from);
  
  inline CrashReport_BinaryImage& operator=(const CrashReport_BinaryImage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_BinaryImage& default_instance();
  
  void Swap(CrashReport_BinaryImage* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_BinaryImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_BinaryImage& from);
  void MergeFrom(const CrashReport_BinaryImage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 base_address = 1;
  inline bool has_base_address() const;
  inline void clear_base_address();
  static const int kBaseAddressFieldNumber = 1;
  inline ::google::protobuf::uint64 base_address() const;
  inline void set_base_address(::google::protobuf::uint64 value);
  
  // required uint64 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bytes uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  
  // optional .plcrash.CrashReport.Processor code_type = 5;
  inline bool has_code_type() const;
  inline void clear_code_type();
  static const int kCodeTypeFieldNumber = 5;
  inline const ::plcrash::CrashReport_Processor& code_type() const;
  inline ::plcrash::CrashReport_Processor* mutable_code_type();
  inline ::plcrash::CrashReport_Processor* release_code_type();
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.BinaryImage)
 private:
  inline void set_has_base_address();
  inline void clear_has_base_address();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 base_address_;
  ::google::protobuf::uint64 size_;
  ::std::string* name_;
  ::std::string* uuid_;
  ::plcrash::CrashReport_Processor* code_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_BinaryImage* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport_Exception : public ::google::protobuf::Message {
 public:
  CrashReport_Exception();
  virtual ~CrashReport_Exception();
  
  CrashReport_Exception(const CrashReport_Exception& from);
  
  inline CrashReport_Exception& operator=(const CrashReport_Exception& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_Exception& default_instance();
  
  void Swap(CrashReport_Exception* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_Exception* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_Exception& from);
  void MergeFrom(const CrashReport_Exception& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  
  // repeated .plcrash.CrashReport.Thread.StackFrame frames = 3;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 3;
  inline const ::plcrash::CrashReport_Thread_StackFrame& frames(int index) const;
  inline ::plcrash::CrashReport_Thread_StackFrame* mutable_frames(int index);
  inline ::plcrash::CrashReport_Thread_StackFrame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_StackFrame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_StackFrame >*
      mutable_frames();
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.Exception)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* reason_;
  ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_StackFrame > frames_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_Exception* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport_Signal : public ::google::protobuf::Message {
 public:
  CrashReport_Signal();
  virtual ~CrashReport_Signal();
  
  CrashReport_Signal(const CrashReport_Signal& from);
  
  inline CrashReport_Signal& operator=(const CrashReport_Signal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_Signal& default_instance();
  
  void Swap(CrashReport_Signal* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_Signal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_Signal& from);
  void MergeFrom(const CrashReport_Signal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  
  // required uint64 address = 3;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 3;
  inline ::google::protobuf::uint64 address() const;
  inline void set_address(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.Signal)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_address();
  inline void clear_has_address();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* code_;
  ::google::protobuf::uint64 address_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_Signal* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport_ProcessInfo : public ::google::protobuf::Message {
 public:
  CrashReport_ProcessInfo();
  virtual ~CrashReport_ProcessInfo();
  
  CrashReport_ProcessInfo(const CrashReport_ProcessInfo& from);
  
  inline CrashReport_ProcessInfo& operator=(const CrashReport_ProcessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_ProcessInfo& default_instance();
  
  void Swap(CrashReport_ProcessInfo* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_ProcessInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_ProcessInfo& from);
  void MergeFrom(const CrashReport_ProcessInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string process_name = 1;
  inline bool has_process_name() const;
  inline void clear_process_name();
  static const int kProcessNameFieldNumber = 1;
  inline const ::std::string& process_name() const;
  inline void set_process_name(const ::std::string& value);
  inline void set_process_name(const char* value);
  inline void set_process_name(const char* value, size_t size);
  inline ::std::string* mutable_process_name();
  inline ::std::string* release_process_name();
  
  // required uint32 process_id = 2;
  inline bool has_process_id() const;
  inline void clear_process_id();
  static const int kProcessIdFieldNumber = 2;
  inline ::google::protobuf::uint32 process_id() const;
  inline void set_process_id(::google::protobuf::uint32 value);
  
  // optional string process_path = 3;
  inline bool has_process_path() const;
  inline void clear_process_path();
  static const int kProcessPathFieldNumber = 3;
  inline const ::std::string& process_path() const;
  inline void set_process_path(const ::std::string& value);
  inline void set_process_path(const char* value);
  inline void set_process_path(const char* value, size_t size);
  inline ::std::string* mutable_process_path();
  inline ::std::string* release_process_path();
  
  // optional string parent_process_name = 4;
  inline bool has_parent_process_name() const;
  inline void clear_parent_process_name();
  static const int kParentProcessNameFieldNumber = 4;
  inline const ::std::string& parent_process_name() const;
  inline void set_parent_process_name(const ::std::string& value);
  inline void set_parent_process_name(const char* value);
  inline void set_parent_process_name(const char* value, size_t size);
  inline ::std::string* mutable_parent_process_name();
  inline ::std::string* release_parent_process_name();
  
  // required uint32 parent_process_id = 5;
  inline bool has_parent_process_id() const;
  inline void clear_parent_process_id();
  static const int kParentProcessIdFieldNumber = 5;
  inline ::google::protobuf::uint32 parent_process_id() const;
  inline void set_parent_process_id(::google::protobuf::uint32 value);
  
  // required bool native = 6;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 6;
  inline bool native() const;
  inline void set_native(bool value);
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.ProcessInfo)
 private:
  inline void set_has_process_name();
  inline void clear_has_process_name();
  inline void set_has_process_id();
  inline void clear_has_process_id();
  inline void set_has_process_path();
  inline void clear_has_process_path();
  inline void set_has_parent_process_name();
  inline void clear_has_parent_process_name();
  inline void set_has_parent_process_id();
  inline void clear_has_parent_process_id();
  inline void set_has_native();
  inline void clear_has_native();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* process_name_;
  ::std::string* process_path_;
  ::google::protobuf::uint32 process_id_;
  ::google::protobuf::uint32 parent_process_id_;
  ::std::string* parent_process_name_;
  bool native_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_ProcessInfo* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport_MachineInfo : public ::google::protobuf::Message {
 public:
  CrashReport_MachineInfo();
  virtual ~CrashReport_MachineInfo();
  
  CrashReport_MachineInfo(const CrashReport_MachineInfo& from);
  
  inline CrashReport_MachineInfo& operator=(const CrashReport_MachineInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport_MachineInfo& default_instance();
  
  void Swap(CrashReport_MachineInfo* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport_MachineInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport_MachineInfo& from);
  void MergeFrom(const CrashReport_MachineInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string model = 1;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 1;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  
  // required .plcrash.CrashReport.Processor processor = 2;
  inline bool has_processor() const;
  inline void clear_processor();
  static const int kProcessorFieldNumber = 2;
  inline const ::plcrash::CrashReport_Processor& processor() const;
  inline ::plcrash::CrashReport_Processor* mutable_processor();
  inline ::plcrash::CrashReport_Processor* release_processor();
  
  // required uint32 processor_count = 3;
  inline bool has_processor_count() const;
  inline void clear_processor_count();
  static const int kProcessorCountFieldNumber = 3;
  inline ::google::protobuf::uint32 processor_count() const;
  inline void set_processor_count(::google::protobuf::uint32 value);
  
  // required uint32 logical_processor_count = 4;
  inline bool has_logical_processor_count() const;
  inline void clear_logical_processor_count();
  static const int kLogicalProcessorCountFieldNumber = 4;
  inline ::google::protobuf::uint32 logical_processor_count() const;
  inline void set_logical_processor_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport.MachineInfo)
 private:
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_processor();
  inline void clear_has_processor();
  inline void set_has_processor_count();
  inline void clear_has_processor_count();
  inline void set_has_logical_processor_count();
  inline void clear_has_logical_processor_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* model_;
  ::plcrash::CrashReport_Processor* processor_;
  ::google::protobuf::uint32 processor_count_;
  ::google::protobuf::uint32 logical_processor_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport_MachineInfo* default_instance_;
};
// -------------------------------------------------------------------

class CrashReport : public ::google::protobuf::Message {
 public:
  CrashReport();
  virtual ~CrashReport();
  
  CrashReport(const CrashReport& from);
  
  inline CrashReport& operator=(const CrashReport& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrashReport& default_instance();
  
  void Swap(CrashReport* other);
  
  // implements Message ----------------------------------------------
  
  CrashReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrashReport& from);
  void MergeFrom(const CrashReport& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CrashReport_Processor Processor;
  typedef CrashReport_SystemInfo SystemInfo;
  typedef CrashReport_ApplicationInfo ApplicationInfo;
  typedef CrashReport_Thread Thread;
  typedef CrashReport_BinaryImage BinaryImage;
  typedef CrashReport_Exception Exception;
  typedef CrashReport_Signal Signal;
  typedef CrashReport_ProcessInfo ProcessInfo;
  typedef CrashReport_MachineInfo MachineInfo;
  
  // accessors -------------------------------------------------------
  
  // required .plcrash.CrashReport.SystemInfo system_info = 1;
  inline bool has_system_info() const;
  inline void clear_system_info();
  static const int kSystemInfoFieldNumber = 1;
  inline const ::plcrash::CrashReport_SystemInfo& system_info() const;
  inline ::plcrash::CrashReport_SystemInfo* mutable_system_info();
  inline ::plcrash::CrashReport_SystemInfo* release_system_info();
  
  // required .plcrash.CrashReport.ApplicationInfo application_info = 2;
  inline bool has_application_info() const;
  inline void clear_application_info();
  static const int kApplicationInfoFieldNumber = 2;
  inline const ::plcrash::CrashReport_ApplicationInfo& application_info() const;
  inline ::plcrash::CrashReport_ApplicationInfo* mutable_application_info();
  inline ::plcrash::CrashReport_ApplicationInfo* release_application_info();
  
  // repeated .plcrash.CrashReport.Thread threads = 3;
  inline int threads_size() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 3;
  inline const ::plcrash::CrashReport_Thread& threads(int index) const;
  inline ::plcrash::CrashReport_Thread* mutable_threads(int index);
  inline ::plcrash::CrashReport_Thread* add_threads();
  inline const ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread >&
      threads() const;
  inline ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread >*
      mutable_threads();
  
  // repeated .plcrash.CrashReport.BinaryImage binary_images = 4;
  inline int binary_images_size() const;
  inline void clear_binary_images();
  static const int kBinaryImagesFieldNumber = 4;
  inline const ::plcrash::CrashReport_BinaryImage& binary_images(int index) const;
  inline ::plcrash::CrashReport_BinaryImage* mutable_binary_images(int index);
  inline ::plcrash::CrashReport_BinaryImage* add_binary_images();
  inline const ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_BinaryImage >&
      binary_images() const;
  inline ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_BinaryImage >*
      mutable_binary_images();
  
  // optional .plcrash.CrashReport.Exception exception = 5;
  inline bool has_exception() const;
  inline void clear_exception();
  static const int kExceptionFieldNumber = 5;
  inline const ::plcrash::CrashReport_Exception& exception() const;
  inline ::plcrash::CrashReport_Exception* mutable_exception();
  inline ::plcrash::CrashReport_Exception* release_exception();
  
  // required .plcrash.CrashReport.Signal signal = 6;
  inline bool has_signal() const;
  inline void clear_signal();
  static const int kSignalFieldNumber = 6;
  inline const ::plcrash::CrashReport_Signal& signal() const;
  inline ::plcrash::CrashReport_Signal* mutable_signal();
  inline ::plcrash::CrashReport_Signal* release_signal();
  
  // optional .plcrash.CrashReport.ProcessInfo process_info = 7;
  inline bool has_process_info() const;
  inline void clear_process_info();
  static const int kProcessInfoFieldNumber = 7;
  inline const ::plcrash::CrashReport_ProcessInfo& process_info() const;
  inline ::plcrash::CrashReport_ProcessInfo* mutable_process_info();
  inline ::plcrash::CrashReport_ProcessInfo* release_process_info();
  
  // optional .plcrash.CrashReport.MachineInfo machine_info = 8;
  inline bool has_machine_info() const;
  inline void clear_machine_info();
  static const int kMachineInfoFieldNumber = 8;
  inline const ::plcrash::CrashReport_MachineInfo& machine_info() const;
  inline ::plcrash::CrashReport_MachineInfo* mutable_machine_info();
  inline ::plcrash::CrashReport_MachineInfo* release_machine_info();
  
  // @@protoc_insertion_point(class_scope:plcrash.CrashReport)
 private:
  inline void set_has_system_info();
  inline void clear_has_system_info();
  inline void set_has_application_info();
  inline void clear_has_application_info();
  inline void set_has_exception();
  inline void clear_has_exception();
  inline void set_has_signal();
  inline void clear_has_signal();
  inline void set_has_process_info();
  inline void clear_has_process_info();
  inline void set_has_machine_info();
  inline void clear_has_machine_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::plcrash::CrashReport_SystemInfo* system_info_;
  ::plcrash::CrashReport_ApplicationInfo* application_info_;
  ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread > threads_;
  ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_BinaryImage > binary_images_;
  ::plcrash::CrashReport_Exception* exception_;
  ::plcrash::CrashReport_Signal* signal_;
  ::plcrash::CrashReport_ProcessInfo* process_info_;
  ::plcrash::CrashReport_MachineInfo* machine_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto();
  friend void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto();
  
  void InitAsDefaultInstance();
  static CrashReport* default_instance_;
};
// ===================================================================


// ===================================================================

// CrashReport_Processor

// optional .plcrash.CrashReport.Processor.TypeEncoding encoding = 1 [default = TYPE_ENCODING_UNKNOWN];
inline bool CrashReport_Processor::has_encoding() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_Processor::set_has_encoding() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_Processor::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_Processor::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
inline ::plcrash::CrashReport_Processor_TypeEncoding CrashReport_Processor::encoding() const {
  return static_cast< ::plcrash::CrashReport_Processor_TypeEncoding >(encoding_);
}
inline void CrashReport_Processor::set_encoding(::plcrash::CrashReport_Processor_TypeEncoding value) {
  GOOGLE_DCHECK(::plcrash::CrashReport_Processor_TypeEncoding_IsValid(value));
  set_has_encoding();
  encoding_ = value;
}

// required uint64 type = 2;
inline bool CrashReport_Processor::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport_Processor::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport_Processor::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport_Processor::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
  clear_has_type();
}
inline ::google::protobuf::uint64 CrashReport_Processor::type() const {
  return type_;
}
inline void CrashReport_Processor::set_type(::google::protobuf::uint64 value) {
  set_has_type();
  type_ = value;
}

// required uint64 subtype = 3;
inline bool CrashReport_Processor::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrashReport_Processor::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrashReport_Processor::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrashReport_Processor::clear_subtype() {
  subtype_ = GOOGLE_ULONGLONG(0);
  clear_has_subtype();
}
inline ::google::protobuf::uint64 CrashReport_Processor::subtype() const {
  return subtype_;
}
inline void CrashReport_Processor::set_subtype(::google::protobuf::uint64 value) {
  set_has_subtype();
  subtype_ = value;
}

// -------------------------------------------------------------------

// CrashReport_SystemInfo

// optional .plcrash.CrashReport.SystemInfo.OperatingSystem operating_system = 1 [default = OS_UNKNOWN];
inline bool CrashReport_SystemInfo::has_operating_system() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_SystemInfo::set_has_operating_system() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_SystemInfo::clear_has_operating_system() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_SystemInfo::clear_operating_system() {
  operating_system_ = 3;
  clear_has_operating_system();
}
inline ::plcrash::CrashReport_SystemInfo_OperatingSystem CrashReport_SystemInfo::operating_system() const {
  return static_cast< ::plcrash::CrashReport_SystemInfo_OperatingSystem >(operating_system_);
}
inline void CrashReport_SystemInfo::set_operating_system(::plcrash::CrashReport_SystemInfo_OperatingSystem value) {
  GOOGLE_DCHECK(::plcrash::CrashReport_SystemInfo_OperatingSystem_IsValid(value));
  set_has_operating_system();
  operating_system_ = value;
}

// required string os_version = 2;
inline bool CrashReport_SystemInfo::has_os_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport_SystemInfo::set_has_os_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport_SystemInfo::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport_SystemInfo::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& CrashReport_SystemInfo::os_version() const {
  return *os_version_;
}
inline void CrashReport_SystemInfo::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void CrashReport_SystemInfo::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void CrashReport_SystemInfo::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_SystemInfo::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  return os_version_;
}
inline ::std::string* CrashReport_SystemInfo::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .plcrash.Architecture architecture = 3 [default = ARCHITECTURE_UNKNOWN];
inline bool CrashReport_SystemInfo::has_architecture() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrashReport_SystemInfo::set_has_architecture() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrashReport_SystemInfo::clear_has_architecture() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrashReport_SystemInfo::clear_architecture() {
  architecture_ = 7;
  clear_has_architecture();
}
inline plcrash::Architecture CrashReport_SystemInfo::architecture() const {
  return static_cast< plcrash::Architecture >(architecture_);
}
inline void CrashReport_SystemInfo::set_architecture(plcrash::Architecture value) {
  GOOGLE_DCHECK(plcrash::Architecture_IsValid(value));
  set_has_architecture();
  architecture_ = value;
}

// required int64 timestamp = 4;
inline bool CrashReport_SystemInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CrashReport_SystemInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CrashReport_SystemInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CrashReport_SystemInfo::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 CrashReport_SystemInfo::timestamp() const {
  return timestamp_;
}
inline void CrashReport_SystemInfo::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional string os_build = 5;
inline bool CrashReport_SystemInfo::has_os_build() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CrashReport_SystemInfo::set_has_os_build() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CrashReport_SystemInfo::clear_has_os_build() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CrashReport_SystemInfo::clear_os_build() {
  if (os_build_ != &::google::protobuf::internal::kEmptyString) {
    os_build_->clear();
  }
  clear_has_os_build();
}
inline const ::std::string& CrashReport_SystemInfo::os_build() const {
  return *os_build_;
}
inline void CrashReport_SystemInfo::set_os_build(const ::std::string& value) {
  set_has_os_build();
  if (os_build_ == &::google::protobuf::internal::kEmptyString) {
    os_build_ = new ::std::string;
  }
  os_build_->assign(value);
}
inline void CrashReport_SystemInfo::set_os_build(const char* value) {
  set_has_os_build();
  if (os_build_ == &::google::protobuf::internal::kEmptyString) {
    os_build_ = new ::std::string;
  }
  os_build_->assign(value);
}
inline void CrashReport_SystemInfo::set_os_build(const char* value, size_t size) {
  set_has_os_build();
  if (os_build_ == &::google::protobuf::internal::kEmptyString) {
    os_build_ = new ::std::string;
  }
  os_build_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_SystemInfo::mutable_os_build() {
  set_has_os_build();
  if (os_build_ == &::google::protobuf::internal::kEmptyString) {
    os_build_ = new ::std::string;
  }
  return os_build_;
}
inline ::std::string* CrashReport_SystemInfo::release_os_build() {
  clear_has_os_build();
  if (os_build_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_build_;
    os_build_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CrashReport_ApplicationInfo

// required string identifier = 1;
inline bool CrashReport_ApplicationInfo::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_ApplicationInfo::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_ApplicationInfo::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_ApplicationInfo::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& CrashReport_ApplicationInfo::identifier() const {
  return *identifier_;
}
inline void CrashReport_ApplicationInfo::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void CrashReport_ApplicationInfo::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void CrashReport_ApplicationInfo::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_ApplicationInfo::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* CrashReport_ApplicationInfo::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string version = 2;
inline bool CrashReport_ApplicationInfo::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport_ApplicationInfo::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport_ApplicationInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport_ApplicationInfo::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& CrashReport_ApplicationInfo::version() const {
  return *version_;
}
inline void CrashReport_ApplicationInfo::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void CrashReport_ApplicationInfo::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void CrashReport_ApplicationInfo::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_ApplicationInfo::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* CrashReport_ApplicationInfo::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CrashReport_Thread_StackFrame

// required uint64 pc = 3;
inline bool CrashReport_Thread_StackFrame::has_pc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_Thread_StackFrame::set_has_pc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_Thread_StackFrame::clear_has_pc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_Thread_StackFrame::clear_pc() {
  pc_ = GOOGLE_ULONGLONG(0);
  clear_has_pc();
}
inline ::google::protobuf::uint64 CrashReport_Thread_StackFrame::pc() const {
  return pc_;
}
inline void CrashReport_Thread_StackFrame::set_pc(::google::protobuf::uint64 value) {
  set_has_pc();
  pc_ = value;
}

// optional string symbol = 4;
inline bool CrashReport_Thread_StackFrame::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport_Thread_StackFrame::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport_Thread_StackFrame::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport_Thread_StackFrame::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& CrashReport_Thread_StackFrame::symbol() const {
  return *symbol_;
}
inline void CrashReport_Thread_StackFrame::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void CrashReport_Thread_StackFrame::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void CrashReport_Thread_StackFrame::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_Thread_StackFrame::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* CrashReport_Thread_StackFrame::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CrashReport_Thread_RegisterValue

// required string name = 1;
inline bool CrashReport_Thread_RegisterValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_Thread_RegisterValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_Thread_RegisterValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_Thread_RegisterValue::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CrashReport_Thread_RegisterValue::name() const {
  return *name_;
}
inline void CrashReport_Thread_RegisterValue::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CrashReport_Thread_RegisterValue::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CrashReport_Thread_RegisterValue::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_Thread_RegisterValue::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CrashReport_Thread_RegisterValue::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 value = 2;
inline bool CrashReport_Thread_RegisterValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport_Thread_RegisterValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport_Thread_RegisterValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport_Thread_RegisterValue::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 CrashReport_Thread_RegisterValue::value() const {
  return value_;
}
inline void CrashReport_Thread_RegisterValue::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// CrashReport_Thread

// required uint32 thread_number = 1;
inline bool CrashReport_Thread::has_thread_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_Thread::set_has_thread_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_Thread::clear_has_thread_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_Thread::clear_thread_number() {
  thread_number_ = 0u;
  clear_has_thread_number();
}
inline ::google::protobuf::uint32 CrashReport_Thread::thread_number() const {
  return thread_number_;
}
inline void CrashReport_Thread::set_thread_number(::google::protobuf::uint32 value) {
  set_has_thread_number();
  thread_number_ = value;
}

// repeated .plcrash.CrashReport.Thread.StackFrame frames = 2;
inline int CrashReport_Thread::frames_size() const {
  return frames_.size();
}
inline void CrashReport_Thread::clear_frames() {
  frames_.Clear();
}
inline const ::plcrash::CrashReport_Thread_StackFrame& CrashReport_Thread::frames(int index) const {
  return frames_.Get(index);
}
inline ::plcrash::CrashReport_Thread_StackFrame* CrashReport_Thread::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::plcrash::CrashReport_Thread_StackFrame* CrashReport_Thread::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_StackFrame >&
CrashReport_Thread::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_StackFrame >*
CrashReport_Thread::mutable_frames() {
  return &frames_;
}

// required bool crashed = 3;
inline bool CrashReport_Thread::has_crashed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrashReport_Thread::set_has_crashed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrashReport_Thread::clear_has_crashed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrashReport_Thread::clear_crashed() {
  crashed_ = false;
  clear_has_crashed();
}
inline bool CrashReport_Thread::crashed() const {
  return crashed_;
}
inline void CrashReport_Thread::set_crashed(bool value) {
  set_has_crashed();
  crashed_ = value;
}

// repeated .plcrash.CrashReport.Thread.RegisterValue registers = 4;
inline int CrashReport_Thread::registers_size() const {
  return registers_.size();
}
inline void CrashReport_Thread::clear_registers() {
  registers_.Clear();
}
inline const ::plcrash::CrashReport_Thread_RegisterValue& CrashReport_Thread::registers(int index) const {
  return registers_.Get(index);
}
inline ::plcrash::CrashReport_Thread_RegisterValue* CrashReport_Thread::mutable_registers(int index) {
  return registers_.Mutable(index);
}
inline ::plcrash::CrashReport_Thread_RegisterValue* CrashReport_Thread::add_registers() {
  return registers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_RegisterValue >&
CrashReport_Thread::registers() const {
  return registers_;
}
inline ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_RegisterValue >*
CrashReport_Thread::mutable_registers() {
  return &registers_;
}

// -------------------------------------------------------------------

// CrashReport_BinaryImage

// required uint64 base_address = 1;
inline bool CrashReport_BinaryImage::has_base_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_BinaryImage::set_has_base_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_BinaryImage::clear_has_base_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_BinaryImage::clear_base_address() {
  base_address_ = GOOGLE_ULONGLONG(0);
  clear_has_base_address();
}
inline ::google::protobuf::uint64 CrashReport_BinaryImage::base_address() const {
  return base_address_;
}
inline void CrashReport_BinaryImage::set_base_address(::google::protobuf::uint64 value) {
  set_has_base_address();
  base_address_ = value;
}

// required uint64 size = 2;
inline bool CrashReport_BinaryImage::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport_BinaryImage::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport_BinaryImage::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport_BinaryImage::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 CrashReport_BinaryImage::size() const {
  return size_;
}
inline void CrashReport_BinaryImage::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// required string name = 3;
inline bool CrashReport_BinaryImage::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrashReport_BinaryImage::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrashReport_BinaryImage::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrashReport_BinaryImage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CrashReport_BinaryImage::name() const {
  return *name_;
}
inline void CrashReport_BinaryImage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CrashReport_BinaryImage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CrashReport_BinaryImage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_BinaryImage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CrashReport_BinaryImage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes uuid = 4;
inline bool CrashReport_BinaryImage::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CrashReport_BinaryImage::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CrashReport_BinaryImage::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CrashReport_BinaryImage::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& CrashReport_BinaryImage::uuid() const {
  return *uuid_;
}
inline void CrashReport_BinaryImage::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CrashReport_BinaryImage::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CrashReport_BinaryImage::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_BinaryImage::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* CrashReport_BinaryImage::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .plcrash.CrashReport.Processor code_type = 5;
inline bool CrashReport_BinaryImage::has_code_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CrashReport_BinaryImage::set_has_code_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CrashReport_BinaryImage::clear_has_code_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CrashReport_BinaryImage::clear_code_type() {
  if (code_type_ != NULL) code_type_->::plcrash::CrashReport_Processor::Clear();
  clear_has_code_type();
}
inline const ::plcrash::CrashReport_Processor& CrashReport_BinaryImage::code_type() const {
  return code_type_ != NULL ? *code_type_ : *default_instance_->code_type_;
}
inline ::plcrash::CrashReport_Processor* CrashReport_BinaryImage::mutable_code_type() {
  set_has_code_type();
  if (code_type_ == NULL) code_type_ = new ::plcrash::CrashReport_Processor;
  return code_type_;
}
inline ::plcrash::CrashReport_Processor* CrashReport_BinaryImage::release_code_type() {
  clear_has_code_type();
  ::plcrash::CrashReport_Processor* temp = code_type_;
  code_type_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CrashReport_Exception

// required string name = 1;
inline bool CrashReport_Exception::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_Exception::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_Exception::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_Exception::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CrashReport_Exception::name() const {
  return *name_;
}
inline void CrashReport_Exception::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CrashReport_Exception::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CrashReport_Exception::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_Exception::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CrashReport_Exception::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string reason = 2;
inline bool CrashReport_Exception::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport_Exception::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport_Exception::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport_Exception::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& CrashReport_Exception::reason() const {
  return *reason_;
}
inline void CrashReport_Exception::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void CrashReport_Exception::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void CrashReport_Exception::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_Exception::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* CrashReport_Exception::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .plcrash.CrashReport.Thread.StackFrame frames = 3;
inline int CrashReport_Exception::frames_size() const {
  return frames_.size();
}
inline void CrashReport_Exception::clear_frames() {
  frames_.Clear();
}
inline const ::plcrash::CrashReport_Thread_StackFrame& CrashReport_Exception::frames(int index) const {
  return frames_.Get(index);
}
inline ::plcrash::CrashReport_Thread_StackFrame* CrashReport_Exception::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::plcrash::CrashReport_Thread_StackFrame* CrashReport_Exception::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_StackFrame >&
CrashReport_Exception::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread_StackFrame >*
CrashReport_Exception::mutable_frames() {
  return &frames_;
}

// -------------------------------------------------------------------

// CrashReport_Signal

// required string name = 1;
inline bool CrashReport_Signal::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_Signal::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_Signal::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_Signal::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CrashReport_Signal::name() const {
  return *name_;
}
inline void CrashReport_Signal::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CrashReport_Signal::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CrashReport_Signal::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_Signal::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CrashReport_Signal::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string code = 2;
inline bool CrashReport_Signal::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport_Signal::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport_Signal::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport_Signal::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CrashReport_Signal::code() const {
  return *code_;
}
inline void CrashReport_Signal::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CrashReport_Signal::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CrashReport_Signal::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_Signal::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CrashReport_Signal::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 address = 3;
inline bool CrashReport_Signal::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrashReport_Signal::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrashReport_Signal::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrashReport_Signal::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
  clear_has_address();
}
inline ::google::protobuf::uint64 CrashReport_Signal::address() const {
  return address_;
}
inline void CrashReport_Signal::set_address(::google::protobuf::uint64 value) {
  set_has_address();
  address_ = value;
}

// -------------------------------------------------------------------

// CrashReport_ProcessInfo

// optional string process_name = 1;
inline bool CrashReport_ProcessInfo::has_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_ProcessInfo::set_has_process_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_ProcessInfo::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_ProcessInfo::clear_process_name() {
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    process_name_->clear();
  }
  clear_has_process_name();
}
inline const ::std::string& CrashReport_ProcessInfo::process_name() const {
  return *process_name_;
}
inline void CrashReport_ProcessInfo::set_process_name(const ::std::string& value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void CrashReport_ProcessInfo::set_process_name(const char* value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void CrashReport_ProcessInfo::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_ProcessInfo::mutable_process_name() {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  return process_name_;
}
inline ::std::string* CrashReport_ProcessInfo::release_process_name() {
  clear_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_name_;
    process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 process_id = 2;
inline bool CrashReport_ProcessInfo::has_process_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport_ProcessInfo::set_has_process_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport_ProcessInfo::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport_ProcessInfo::clear_process_id() {
  process_id_ = 0u;
  clear_has_process_id();
}
inline ::google::protobuf::uint32 CrashReport_ProcessInfo::process_id() const {
  return process_id_;
}
inline void CrashReport_ProcessInfo::set_process_id(::google::protobuf::uint32 value) {
  set_has_process_id();
  process_id_ = value;
}

// optional string process_path = 3;
inline bool CrashReport_ProcessInfo::has_process_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrashReport_ProcessInfo::set_has_process_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrashReport_ProcessInfo::clear_has_process_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrashReport_ProcessInfo::clear_process_path() {
  if (process_path_ != &::google::protobuf::internal::kEmptyString) {
    process_path_->clear();
  }
  clear_has_process_path();
}
inline const ::std::string& CrashReport_ProcessInfo::process_path() const {
  return *process_path_;
}
inline void CrashReport_ProcessInfo::set_process_path(const ::std::string& value) {
  set_has_process_path();
  if (process_path_ == &::google::protobuf::internal::kEmptyString) {
    process_path_ = new ::std::string;
  }
  process_path_->assign(value);
}
inline void CrashReport_ProcessInfo::set_process_path(const char* value) {
  set_has_process_path();
  if (process_path_ == &::google::protobuf::internal::kEmptyString) {
    process_path_ = new ::std::string;
  }
  process_path_->assign(value);
}
inline void CrashReport_ProcessInfo::set_process_path(const char* value, size_t size) {
  set_has_process_path();
  if (process_path_ == &::google::protobuf::internal::kEmptyString) {
    process_path_ = new ::std::string;
  }
  process_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_ProcessInfo::mutable_process_path() {
  set_has_process_path();
  if (process_path_ == &::google::protobuf::internal::kEmptyString) {
    process_path_ = new ::std::string;
  }
  return process_path_;
}
inline ::std::string* CrashReport_ProcessInfo::release_process_path() {
  clear_has_process_path();
  if (process_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_path_;
    process_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string parent_process_name = 4;
inline bool CrashReport_ProcessInfo::has_parent_process_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CrashReport_ProcessInfo::set_has_parent_process_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CrashReport_ProcessInfo::clear_has_parent_process_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CrashReport_ProcessInfo::clear_parent_process_name() {
  if (parent_process_name_ != &::google::protobuf::internal::kEmptyString) {
    parent_process_name_->clear();
  }
  clear_has_parent_process_name();
}
inline const ::std::string& CrashReport_ProcessInfo::parent_process_name() const {
  return *parent_process_name_;
}
inline void CrashReport_ProcessInfo::set_parent_process_name(const ::std::string& value) {
  set_has_parent_process_name();
  if (parent_process_name_ == &::google::protobuf::internal::kEmptyString) {
    parent_process_name_ = new ::std::string;
  }
  parent_process_name_->assign(value);
}
inline void CrashReport_ProcessInfo::set_parent_process_name(const char* value) {
  set_has_parent_process_name();
  if (parent_process_name_ == &::google::protobuf::internal::kEmptyString) {
    parent_process_name_ = new ::std::string;
  }
  parent_process_name_->assign(value);
}
inline void CrashReport_ProcessInfo::set_parent_process_name(const char* value, size_t size) {
  set_has_parent_process_name();
  if (parent_process_name_ == &::google::protobuf::internal::kEmptyString) {
    parent_process_name_ = new ::std::string;
  }
  parent_process_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_ProcessInfo::mutable_parent_process_name() {
  set_has_parent_process_name();
  if (parent_process_name_ == &::google::protobuf::internal::kEmptyString) {
    parent_process_name_ = new ::std::string;
  }
  return parent_process_name_;
}
inline ::std::string* CrashReport_ProcessInfo::release_parent_process_name() {
  clear_has_parent_process_name();
  if (parent_process_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parent_process_name_;
    parent_process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 parent_process_id = 5;
inline bool CrashReport_ProcessInfo::has_parent_process_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CrashReport_ProcessInfo::set_has_parent_process_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CrashReport_ProcessInfo::clear_has_parent_process_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CrashReport_ProcessInfo::clear_parent_process_id() {
  parent_process_id_ = 0u;
  clear_has_parent_process_id();
}
inline ::google::protobuf::uint32 CrashReport_ProcessInfo::parent_process_id() const {
  return parent_process_id_;
}
inline void CrashReport_ProcessInfo::set_parent_process_id(::google::protobuf::uint32 value) {
  set_has_parent_process_id();
  parent_process_id_ = value;
}

// required bool native = 6;
inline bool CrashReport_ProcessInfo::has_native() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CrashReport_ProcessInfo::set_has_native() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CrashReport_ProcessInfo::clear_has_native() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CrashReport_ProcessInfo::clear_native() {
  native_ = false;
  clear_has_native();
}
inline bool CrashReport_ProcessInfo::native() const {
  return native_;
}
inline void CrashReport_ProcessInfo::set_native(bool value) {
  set_has_native();
  native_ = value;
}

// -------------------------------------------------------------------

// CrashReport_MachineInfo

// optional string model = 1;
inline bool CrashReport_MachineInfo::has_model() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport_MachineInfo::set_has_model() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport_MachineInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport_MachineInfo::clear_model() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& CrashReport_MachineInfo::model() const {
  return *model_;
}
inline void CrashReport_MachineInfo::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void CrashReport_MachineInfo::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void CrashReport_MachineInfo::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrashReport_MachineInfo::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  return model_;
}
inline ::std::string* CrashReport_MachineInfo::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .plcrash.CrashReport.Processor processor = 2;
inline bool CrashReport_MachineInfo::has_processor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport_MachineInfo::set_has_processor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport_MachineInfo::clear_has_processor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport_MachineInfo::clear_processor() {
  if (processor_ != NULL) processor_->::plcrash::CrashReport_Processor::Clear();
  clear_has_processor();
}
inline const ::plcrash::CrashReport_Processor& CrashReport_MachineInfo::processor() const {
  return processor_ != NULL ? *processor_ : *default_instance_->processor_;
}
inline ::plcrash::CrashReport_Processor* CrashReport_MachineInfo::mutable_processor() {
  set_has_processor();
  if (processor_ == NULL) processor_ = new ::plcrash::CrashReport_Processor;
  return processor_;
}
inline ::plcrash::CrashReport_Processor* CrashReport_MachineInfo::release_processor() {
  clear_has_processor();
  ::plcrash::CrashReport_Processor* temp = processor_;
  processor_ = NULL;
  return temp;
}

// required uint32 processor_count = 3;
inline bool CrashReport_MachineInfo::has_processor_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrashReport_MachineInfo::set_has_processor_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrashReport_MachineInfo::clear_has_processor_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrashReport_MachineInfo::clear_processor_count() {
  processor_count_ = 0u;
  clear_has_processor_count();
}
inline ::google::protobuf::uint32 CrashReport_MachineInfo::processor_count() const {
  return processor_count_;
}
inline void CrashReport_MachineInfo::set_processor_count(::google::protobuf::uint32 value) {
  set_has_processor_count();
  processor_count_ = value;
}

// required uint32 logical_processor_count = 4;
inline bool CrashReport_MachineInfo::has_logical_processor_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CrashReport_MachineInfo::set_has_logical_processor_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CrashReport_MachineInfo::clear_has_logical_processor_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CrashReport_MachineInfo::clear_logical_processor_count() {
  logical_processor_count_ = 0u;
  clear_has_logical_processor_count();
}
inline ::google::protobuf::uint32 CrashReport_MachineInfo::logical_processor_count() const {
  return logical_processor_count_;
}
inline void CrashReport_MachineInfo::set_logical_processor_count(::google::protobuf::uint32 value) {
  set_has_logical_processor_count();
  logical_processor_count_ = value;
}

// -------------------------------------------------------------------

// CrashReport

// required .plcrash.CrashReport.SystemInfo system_info = 1;
inline bool CrashReport::has_system_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrashReport::set_has_system_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrashReport::clear_has_system_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrashReport::clear_system_info() {
  if (system_info_ != NULL) system_info_->::plcrash::CrashReport_SystemInfo::Clear();
  clear_has_system_info();
}
inline const ::plcrash::CrashReport_SystemInfo& CrashReport::system_info() const {
  return system_info_ != NULL ? *system_info_ : *default_instance_->system_info_;
}
inline ::plcrash::CrashReport_SystemInfo* CrashReport::mutable_system_info() {
  set_has_system_info();
  if (system_info_ == NULL) system_info_ = new ::plcrash::CrashReport_SystemInfo;
  return system_info_;
}
inline ::plcrash::CrashReport_SystemInfo* CrashReport::release_system_info() {
  clear_has_system_info();
  ::plcrash::CrashReport_SystemInfo* temp = system_info_;
  system_info_ = NULL;
  return temp;
}

// required .plcrash.CrashReport.ApplicationInfo application_info = 2;
inline bool CrashReport::has_application_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrashReport::set_has_application_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrashReport::clear_has_application_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrashReport::clear_application_info() {
  if (application_info_ != NULL) application_info_->::plcrash::CrashReport_ApplicationInfo::Clear();
  clear_has_application_info();
}
inline const ::plcrash::CrashReport_ApplicationInfo& CrashReport::application_info() const {
  return application_info_ != NULL ? *application_info_ : *default_instance_->application_info_;
}
inline ::plcrash::CrashReport_ApplicationInfo* CrashReport::mutable_application_info() {
  set_has_application_info();
  if (application_info_ == NULL) application_info_ = new ::plcrash::CrashReport_ApplicationInfo;
  return application_info_;
}
inline ::plcrash::CrashReport_ApplicationInfo* CrashReport::release_application_info() {
  clear_has_application_info();
  ::plcrash::CrashReport_ApplicationInfo* temp = application_info_;
  application_info_ = NULL;
  return temp;
}

// repeated .plcrash.CrashReport.Thread threads = 3;
inline int CrashReport::threads_size() const {
  return threads_.size();
}
inline void CrashReport::clear_threads() {
  threads_.Clear();
}
inline const ::plcrash::CrashReport_Thread& CrashReport::threads(int index) const {
  return threads_.Get(index);
}
inline ::plcrash::CrashReport_Thread* CrashReport::mutable_threads(int index) {
  return threads_.Mutable(index);
}
inline ::plcrash::CrashReport_Thread* CrashReport::add_threads() {
  return threads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread >&
CrashReport::threads() const {
  return threads_;
}
inline ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_Thread >*
CrashReport::mutable_threads() {
  return &threads_;
}

// repeated .plcrash.CrashReport.BinaryImage binary_images = 4;
inline int CrashReport::binary_images_size() const {
  return binary_images_.size();
}
inline void CrashReport::clear_binary_images() {
  binary_images_.Clear();
}
inline const ::plcrash::CrashReport_BinaryImage& CrashReport::binary_images(int index) const {
  return binary_images_.Get(index);
}
inline ::plcrash::CrashReport_BinaryImage* CrashReport::mutable_binary_images(int index) {
  return binary_images_.Mutable(index);
}
inline ::plcrash::CrashReport_BinaryImage* CrashReport::add_binary_images() {
  return binary_images_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_BinaryImage >&
CrashReport::binary_images() const {
  return binary_images_;
}
inline ::google::protobuf::RepeatedPtrField< ::plcrash::CrashReport_BinaryImage >*
CrashReport::mutable_binary_images() {
  return &binary_images_;
}

// optional .plcrash.CrashReport.Exception exception = 5;
inline bool CrashReport::has_exception() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CrashReport::set_has_exception() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CrashReport::clear_has_exception() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CrashReport::clear_exception() {
  if (exception_ != NULL) exception_->::plcrash::CrashReport_Exception::Clear();
  clear_has_exception();
}
inline const ::plcrash::CrashReport_Exception& CrashReport::exception() const {
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
inline ::plcrash::CrashReport_Exception* CrashReport::mutable_exception() {
  set_has_exception();
  if (exception_ == NULL) exception_ = new ::plcrash::CrashReport_Exception;
  return exception_;
}
inline ::plcrash::CrashReport_Exception* CrashReport::release_exception() {
  clear_has_exception();
  ::plcrash::CrashReport_Exception* temp = exception_;
  exception_ = NULL;
  return temp;
}

// required .plcrash.CrashReport.Signal signal = 6;
inline bool CrashReport::has_signal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CrashReport::set_has_signal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CrashReport::clear_has_signal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CrashReport::clear_signal() {
  if (signal_ != NULL) signal_->::plcrash::CrashReport_Signal::Clear();
  clear_has_signal();
}
inline const ::plcrash::CrashReport_Signal& CrashReport::signal() const {
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
inline ::plcrash::CrashReport_Signal* CrashReport::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) signal_ = new ::plcrash::CrashReport_Signal;
  return signal_;
}
inline ::plcrash::CrashReport_Signal* CrashReport::release_signal() {
  clear_has_signal();
  ::plcrash::CrashReport_Signal* temp = signal_;
  signal_ = NULL;
  return temp;
}

// optional .plcrash.CrashReport.ProcessInfo process_info = 7;
inline bool CrashReport::has_process_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CrashReport::set_has_process_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CrashReport::clear_has_process_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CrashReport::clear_process_info() {
  if (process_info_ != NULL) process_info_->::plcrash::CrashReport_ProcessInfo::Clear();
  clear_has_process_info();
}
inline const ::plcrash::CrashReport_ProcessInfo& CrashReport::process_info() const {
  return process_info_ != NULL ? *process_info_ : *default_instance_->process_info_;
}
inline ::plcrash::CrashReport_ProcessInfo* CrashReport::mutable_process_info() {
  set_has_process_info();
  if (process_info_ == NULL) process_info_ = new ::plcrash::CrashReport_ProcessInfo;
  return process_info_;
}
inline ::plcrash::CrashReport_ProcessInfo* CrashReport::release_process_info() {
  clear_has_process_info();
  ::plcrash::CrashReport_ProcessInfo* temp = process_info_;
  process_info_ = NULL;
  return temp;
}

// optional .plcrash.CrashReport.MachineInfo machine_info = 8;
inline bool CrashReport::has_machine_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CrashReport::set_has_machine_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CrashReport::clear_has_machine_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CrashReport::clear_machine_info() {
  if (machine_info_ != NULL) machine_info_->::plcrash::CrashReport_MachineInfo::Clear();
  clear_has_machine_info();
}
inline const ::plcrash::CrashReport_MachineInfo& CrashReport::machine_info() const {
  return machine_info_ != NULL ? *machine_info_ : *default_instance_->machine_info_;
}
inline ::plcrash::CrashReport_MachineInfo* CrashReport::mutable_machine_info() {
  set_has_machine_info();
  if (machine_info_ == NULL) machine_info_ = new ::plcrash::CrashReport_MachineInfo;
  return machine_info_;
}
inline ::plcrash::CrashReport_MachineInfo* CrashReport::release_machine_info() {
  clear_has_machine_info();
  ::plcrash::CrashReport_MachineInfo* temp = machine_info_;
  machine_info_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace plcrash

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::plcrash::CrashReport_Processor_TypeEncoding>() {
  return ::plcrash::CrashReport_Processor_TypeEncoding_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::plcrash::CrashReport_SystemInfo_OperatingSystem>() {
  return ::plcrash::CrashReport_SystemInfo_OperatingSystem_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< plcrash::Architecture>() {
  return plcrash::Architecture_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CrashReporter_2fcrash_5freport_2eproto__INCLUDED
