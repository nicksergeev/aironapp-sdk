// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CrashReporter/crash_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace plcrash {

namespace {

const ::google::protobuf::Descriptor* CrashReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_Processor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_Processor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CrashReport_Processor_TypeEncoding_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_SystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_SystemInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CrashReport_SystemInfo_OperatingSystem_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_ApplicationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_ApplicationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_Thread_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_Thread_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_Thread_StackFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_Thread_StackFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_Thread_RegisterValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_Thread_RegisterValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_BinaryImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_BinaryImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_Exception_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_Exception_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_Signal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_Signal_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_ProcessInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_ProcessInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrashReport_MachineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashReport_MachineInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Architecture_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto() {
  protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CrashReporter/crash_report.proto");
  GOOGLE_CHECK(file != NULL);
  CrashReport_descriptor_ = file->message_type(0);
  static const int CrashReport_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport, system_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport, application_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport, threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport, binary_images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport, process_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport, machine_info_),
  };
  CrashReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_descriptor_,
      CrashReport::default_instance_,
      CrashReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport));
  CrashReport_Processor_descriptor_ = CrashReport_descriptor_->nested_type(0);
  static const int CrashReport_Processor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Processor, encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Processor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Processor, subtype_),
  };
  CrashReport_Processor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_Processor_descriptor_,
      CrashReport_Processor::default_instance_,
      CrashReport_Processor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Processor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Processor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_Processor));
  CrashReport_Processor_TypeEncoding_descriptor_ = CrashReport_Processor_descriptor_->enum_type(0);
  CrashReport_SystemInfo_descriptor_ = CrashReport_descriptor_->nested_type(1);
  static const int CrashReport_SystemInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_SystemInfo, operating_system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_SystemInfo, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_SystemInfo, architecture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_SystemInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_SystemInfo, os_build_),
  };
  CrashReport_SystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_SystemInfo_descriptor_,
      CrashReport_SystemInfo::default_instance_,
      CrashReport_SystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_SystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_SystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_SystemInfo));
  CrashReport_SystemInfo_OperatingSystem_descriptor_ = CrashReport_SystemInfo_descriptor_->enum_type(0);
  CrashReport_ApplicationInfo_descriptor_ = CrashReport_descriptor_->nested_type(2);
  static const int CrashReport_ApplicationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ApplicationInfo, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ApplicationInfo, version_),
  };
  CrashReport_ApplicationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_ApplicationInfo_descriptor_,
      CrashReport_ApplicationInfo::default_instance_,
      CrashReport_ApplicationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ApplicationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ApplicationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_ApplicationInfo));
  CrashReport_Thread_descriptor_ = CrashReport_descriptor_->nested_type(3);
  static const int CrashReport_Thread_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread, thread_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread, frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread, crashed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread, registers_),
  };
  CrashReport_Thread_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_Thread_descriptor_,
      CrashReport_Thread::default_instance_,
      CrashReport_Thread_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_Thread));
  CrashReport_Thread_StackFrame_descriptor_ = CrashReport_Thread_descriptor_->nested_type(0);
  static const int CrashReport_Thread_StackFrame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread_StackFrame, pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread_StackFrame, symbol_),
  };
  CrashReport_Thread_StackFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_Thread_StackFrame_descriptor_,
      CrashReport_Thread_StackFrame::default_instance_,
      CrashReport_Thread_StackFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread_StackFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread_StackFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_Thread_StackFrame));
  CrashReport_Thread_RegisterValue_descriptor_ = CrashReport_Thread_descriptor_->nested_type(1);
  static const int CrashReport_Thread_RegisterValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread_RegisterValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread_RegisterValue, value_),
  };
  CrashReport_Thread_RegisterValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_Thread_RegisterValue_descriptor_,
      CrashReport_Thread_RegisterValue::default_instance_,
      CrashReport_Thread_RegisterValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread_RegisterValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Thread_RegisterValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_Thread_RegisterValue));
  CrashReport_BinaryImage_descriptor_ = CrashReport_descriptor_->nested_type(4);
  static const int CrashReport_BinaryImage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_BinaryImage, base_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_BinaryImage, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_BinaryImage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_BinaryImage, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_BinaryImage, code_type_),
  };
  CrashReport_BinaryImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_BinaryImage_descriptor_,
      CrashReport_BinaryImage::default_instance_,
      CrashReport_BinaryImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_BinaryImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_BinaryImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_BinaryImage));
  CrashReport_Exception_descriptor_ = CrashReport_descriptor_->nested_type(5);
  static const int CrashReport_Exception_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Exception, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Exception, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Exception, frames_),
  };
  CrashReport_Exception_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_Exception_descriptor_,
      CrashReport_Exception::default_instance_,
      CrashReport_Exception_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Exception, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Exception, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_Exception));
  CrashReport_Signal_descriptor_ = CrashReport_descriptor_->nested_type(6);
  static const int CrashReport_Signal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Signal, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Signal, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Signal, address_),
  };
  CrashReport_Signal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_Signal_descriptor_,
      CrashReport_Signal::default_instance_,
      CrashReport_Signal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Signal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_Signal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_Signal));
  CrashReport_ProcessInfo_descriptor_ = CrashReport_descriptor_->nested_type(7);
  static const int CrashReport_ProcessInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ProcessInfo, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ProcessInfo, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ProcessInfo, process_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ProcessInfo, parent_process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ProcessInfo, parent_process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ProcessInfo, native_),
  };
  CrashReport_ProcessInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_ProcessInfo_descriptor_,
      CrashReport_ProcessInfo::default_instance_,
      CrashReport_ProcessInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ProcessInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_ProcessInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_ProcessInfo));
  CrashReport_MachineInfo_descriptor_ = CrashReport_descriptor_->nested_type(8);
  static const int CrashReport_MachineInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_MachineInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_MachineInfo, processor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_MachineInfo, processor_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_MachineInfo, logical_processor_count_),
  };
  CrashReport_MachineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrashReport_MachineInfo_descriptor_,
      CrashReport_MachineInfo::default_instance_,
      CrashReport_MachineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_MachineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashReport_MachineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrashReport_MachineInfo));
  Architecture_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CrashReporter_2fcrash_5freport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_descriptor_, &CrashReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_Processor_descriptor_, &CrashReport_Processor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_SystemInfo_descriptor_, &CrashReport_SystemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_ApplicationInfo_descriptor_, &CrashReport_ApplicationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_Thread_descriptor_, &CrashReport_Thread::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_Thread_StackFrame_descriptor_, &CrashReport_Thread_StackFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_Thread_RegisterValue_descriptor_, &CrashReport_Thread_RegisterValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_BinaryImage_descriptor_, &CrashReport_BinaryImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_Exception_descriptor_, &CrashReport_Exception::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_Signal_descriptor_, &CrashReport_Signal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_ProcessInfo_descriptor_, &CrashReport_ProcessInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrashReport_MachineInfo_descriptor_, &CrashReport_MachineInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto() {
  delete CrashReport::default_instance_;
  delete CrashReport_reflection_;
  delete CrashReport_Processor::default_instance_;
  delete CrashReport_Processor_reflection_;
  delete CrashReport_SystemInfo::default_instance_;
  delete CrashReport_SystemInfo_reflection_;
  delete CrashReport_ApplicationInfo::default_instance_;
  delete CrashReport_ApplicationInfo_reflection_;
  delete CrashReport_Thread::default_instance_;
  delete CrashReport_Thread_reflection_;
  delete CrashReport_Thread_StackFrame::default_instance_;
  delete CrashReport_Thread_StackFrame_reflection_;
  delete CrashReport_Thread_RegisterValue::default_instance_;
  delete CrashReport_Thread_RegisterValue_reflection_;
  delete CrashReport_BinaryImage::default_instance_;
  delete CrashReport_BinaryImage_reflection_;
  delete CrashReport_Exception::default_instance_;
  delete CrashReport_Exception_reflection_;
  delete CrashReport_Signal::default_instance_;
  delete CrashReport_Signal_reflection_;
  delete CrashReport_ProcessInfo::default_instance_;
  delete CrashReport_ProcessInfo_reflection_;
  delete CrashReport_MachineInfo::default_instance_;
  delete CrashReport_MachineInfo_reflection_;
}

void protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n CrashReporter/crash_report.proto\022\007plcr"
    "ash\"\262\016\n\013CrashReport\0224\n\013system_info\030\001 \002(\013"
    "2\037.plcrash.CrashReport.SystemInfo\022>\n\020app"
    "lication_info\030\002 \002(\0132$.plcrash.CrashRepor"
    "t.ApplicationInfo\022,\n\007threads\030\003 \003(\0132\033.plc"
    "rash.CrashReport.Thread\0227\n\rbinary_images"
    "\030\004 \003(\0132 .plcrash.CrashReport.BinaryImage"
    "\0221\n\texception\030\005 \001(\0132\036.plcrash.CrashRepor"
    "t.Exception\022+\n\006signal\030\006 \002(\0132\033.plcrash.Cr"
    "ashReport.Signal\0226\n\014process_info\030\007 \001(\0132 "
    ".plcrash.CrashReport.ProcessInfo\0226\n\014mach"
    "ine_info\030\010 \001(\0132 .plcrash.CrashReport.Mac"
    "hineInfo\032\303\001\n\tProcessor\022T\n\010encoding\030\001 \001(\016"
    "2+.plcrash.CrashReport.Processor.TypeEnc"
    "oding:\025TYPE_ENCODING_UNKNOWN\022\014\n\004type\030\002 \002"
    "(\004\022\017\n\007subtype\030\003 \002(\004\"A\n\014TypeEncoding\022\031\n\025T"
    "YPE_ENCODING_UNKNOWN\020\000\022\026\n\022TYPE_ENCODING_"
    "MACH\020\001\032\265\002\n\nSystemInfo\022U\n\020operating_syste"
    "m\030\001 \001(\0162/.plcrash.CrashReport.SystemInfo"
    ".OperatingSystem:\nOS_UNKNOWN\022\022\n\nos_versi"
    "on\030\002 \002(\t\022A\n\014architecture\030\003 \002(\0162\025.plcrash"
    ".Architecture:\024ARCHITECTURE_UNKNOWN\022\021\n\tt"
    "imestamp\030\004 \002(\003\022\020\n\010os_build\030\005 \001(\t\"T\n\017Oper"
    "atingSystem\022\014\n\010MAC_OS_X\020\000\022\r\n\tIPHONE_OS\020\001"
    "\022\024\n\020IPHONE_SIMULATOR\020\002\022\016\n\nOS_UNKNOWN\020\003\0326"
    "\n\017ApplicationInfo\022\022\n\nidentifier\030\001 \002(\t\022\017\n"
    "\007version\030\002 \002(\t\032\376\001\n\006Thread\022\025\n\rthread_numb"
    "er\030\001 \002(\r\0226\n\006frames\030\002 \003(\0132&.plcrash.Crash"
    "Report.Thread.StackFrame\022\017\n\007crashed\030\003 \002("
    "\010\022<\n\tregisters\030\004 \003(\0132).plcrash.CrashRepo"
    "rt.Thread.RegisterValue\032(\n\nStackFrame\022\n\n"
    "\002pc\030\003 \002(\004\022\016\n\006symbol\030\004 \001(\t\032,\n\rRegisterVal"
    "ue\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\004\032\200\001\n\013Bina"
    "ryImage\022\024\n\014base_address\030\001 \002(\004\022\014\n\004size\030\002 "
    "\002(\004\022\014\n\004name\030\003 \002(\t\022\014\n\004uuid\030\004 \001(\014\0221\n\tcode_"
    "type\030\005 \001(\0132\036.plcrash.CrashReport.Process"
    "or\032a\n\tException\022\014\n\004name\030\001 \002(\t\022\016\n\006reason\030"
    "\002 \002(\t\0226\n\006frames\030\003 \003(\0132&.plcrash.CrashRep"
    "ort.Thread.StackFrame\0325\n\006Signal\022\014\n\004name\030"
    "\001 \002(\t\022\014\n\004code\030\002 \002(\t\022\017\n\007address\030\003 \002(\004\032\225\001\n"
    "\013ProcessInfo\022\024\n\014process_name\030\001 \001(\t\022\022\n\npr"
    "ocess_id\030\002 \002(\r\022\024\n\014process_path\030\003 \001(\t\022\033\n\023"
    "parent_process_name\030\004 \001(\t\022\031\n\021parent_proc"
    "ess_id\030\005 \002(\r\022\016\n\006native\030\006 \002(\010\032\211\001\n\013Machine"
    "Info\022\r\n\005model\030\001 \001(\t\0221\n\tprocessor\030\002 \002(\0132\036"
    ".plcrash.CrashReport.Processor\022\027\n\017proces"
    "sor_count\030\003 \002(\r\022\037\n\027logical_processor_cou"
    "nt\030\004 \002(\r*j\n\014Architecture\022\n\n\006X86_32\020\000\022\n\n\006"
    "X86_64\020\001\022\t\n\005ARMV6\020\002\022\007\n\003PPC\020\003\022\t\n\005PPC64\020\004\022"
    "\t\n\005ARMV7\020\005\022\030\n\024ARCHITECTURE_UNKNOWN\020\006B!\n\037"
    "com.plausiblelabs.crashreporter", 2031);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CrashReporter/crash_report.proto", &protobuf_RegisterTypes);
  CrashReport::default_instance_ = new CrashReport();
  CrashReport_Processor::default_instance_ = new CrashReport_Processor();
  CrashReport_SystemInfo::default_instance_ = new CrashReport_SystemInfo();
  CrashReport_ApplicationInfo::default_instance_ = new CrashReport_ApplicationInfo();
  CrashReport_Thread::default_instance_ = new CrashReport_Thread();
  CrashReport_Thread_StackFrame::default_instance_ = new CrashReport_Thread_StackFrame();
  CrashReport_Thread_RegisterValue::default_instance_ = new CrashReport_Thread_RegisterValue();
  CrashReport_BinaryImage::default_instance_ = new CrashReport_BinaryImage();
  CrashReport_Exception::default_instance_ = new CrashReport_Exception();
  CrashReport_Signal::default_instance_ = new CrashReport_Signal();
  CrashReport_ProcessInfo::default_instance_ = new CrashReport_ProcessInfo();
  CrashReport_MachineInfo::default_instance_ = new CrashReport_MachineInfo();
  CrashReport::default_instance_->InitAsDefaultInstance();
  CrashReport_Processor::default_instance_->InitAsDefaultInstance();
  CrashReport_SystemInfo::default_instance_->InitAsDefaultInstance();
  CrashReport_ApplicationInfo::default_instance_->InitAsDefaultInstance();
  CrashReport_Thread::default_instance_->InitAsDefaultInstance();
  CrashReport_Thread_StackFrame::default_instance_->InitAsDefaultInstance();
  CrashReport_Thread_RegisterValue::default_instance_->InitAsDefaultInstance();
  CrashReport_BinaryImage::default_instance_->InitAsDefaultInstance();
  CrashReport_Exception::default_instance_->InitAsDefaultInstance();
  CrashReport_Signal::default_instance_->InitAsDefaultInstance();
  CrashReport_ProcessInfo::default_instance_->InitAsDefaultInstance();
  CrashReport_MachineInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CrashReporter_2fcrash_5freport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CrashReporter_2fcrash_5freport_2eproto {
  StaticDescriptorInitializer_CrashReporter_2fcrash_5freport_2eproto() {
    protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();
  }
} static_descriptor_initializer_CrashReporter_2fcrash_5freport_2eproto_;

const ::google::protobuf::EnumDescriptor* Architecture_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Architecture_descriptor_;
}
bool Architecture_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CrashReport_Processor_TypeEncoding_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_Processor_TypeEncoding_descriptor_;
}
bool CrashReport_Processor_TypeEncoding_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CrashReport_Processor_TypeEncoding CrashReport_Processor::TYPE_ENCODING_UNKNOWN;
const CrashReport_Processor_TypeEncoding CrashReport_Processor::TYPE_ENCODING_MACH;
const CrashReport_Processor_TypeEncoding CrashReport_Processor::TypeEncoding_MIN;
const CrashReport_Processor_TypeEncoding CrashReport_Processor::TypeEncoding_MAX;
const int CrashReport_Processor::TypeEncoding_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CrashReport_Processor::kEncodingFieldNumber;
const int CrashReport_Processor::kTypeFieldNumber;
const int CrashReport_Processor::kSubtypeFieldNumber;
#endif  // !_MSC_VER

CrashReport_Processor::CrashReport_Processor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_Processor::InitAsDefaultInstance() {
}

CrashReport_Processor::CrashReport_Processor(const CrashReport_Processor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_Processor::SharedCtor() {
  _cached_size_ = 0;
  encoding_ = 0;
  type_ = GOOGLE_ULONGLONG(0);
  subtype_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_Processor::~CrashReport_Processor() {
  SharedDtor();
}

void CrashReport_Processor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrashReport_Processor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_Processor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_Processor_descriptor_;
}

const CrashReport_Processor& CrashReport_Processor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_Processor* CrashReport_Processor::default_instance_ = NULL;

CrashReport_Processor* CrashReport_Processor::New() const {
  return new CrashReport_Processor;
}

void CrashReport_Processor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    encoding_ = 0;
    type_ = GOOGLE_ULONGLONG(0);
    subtype_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_Processor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plcrash.CrashReport.Processor.TypeEncoding encoding = 1 [default = TYPE_ENCODING_UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::plcrash::CrashReport_Processor_TypeEncoding_IsValid(value)) {
            set_encoding(static_cast< ::plcrash::CrashReport_Processor_TypeEncoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint64 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subtype;
        break;
      }
      
      // required uint64 subtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_Processor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .plcrash.CrashReport.Processor.TypeEncoding encoding = 1 [default = TYPE_ENCODING_UNKNOWN];
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }
  
  // required uint64 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->type(), output);
  }
  
  // required uint64 subtype = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->subtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_Processor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .plcrash.CrashReport.Processor.TypeEncoding encoding = 1 [default = TYPE_ENCODING_UNKNOWN];
  if (has_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding(), target);
  }
  
  // required uint64 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->type(), target);
  }
  
  // required uint64 subtype = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->subtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_Processor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .plcrash.CrashReport.Processor.TypeEncoding encoding = 1 [default = TYPE_ENCODING_UNKNOWN];
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }
    
    // required uint64 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->type());
    }
    
    // required uint64 subtype = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_Processor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_Processor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_Processor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_Processor::MergeFrom(const CrashReport_Processor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encoding()) {
      set_encoding(from.encoding());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_Processor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_Processor::CopyFrom(const CrashReport_Processor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_Processor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void CrashReport_Processor::Swap(CrashReport_Processor* other) {
  if (other != this) {
    std::swap(encoding_, other->encoding_);
    std::swap(type_, other->type_);
    std::swap(subtype_, other->subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_Processor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_Processor_descriptor_;
  metadata.reflection = CrashReport_Processor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* CrashReport_SystemInfo_OperatingSystem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_SystemInfo_OperatingSystem_descriptor_;
}
bool CrashReport_SystemInfo_OperatingSystem_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CrashReport_SystemInfo_OperatingSystem CrashReport_SystemInfo::MAC_OS_X;
const CrashReport_SystemInfo_OperatingSystem CrashReport_SystemInfo::IPHONE_OS;
const CrashReport_SystemInfo_OperatingSystem CrashReport_SystemInfo::IPHONE_SIMULATOR;
const CrashReport_SystemInfo_OperatingSystem CrashReport_SystemInfo::OS_UNKNOWN;
const CrashReport_SystemInfo_OperatingSystem CrashReport_SystemInfo::OperatingSystem_MIN;
const CrashReport_SystemInfo_OperatingSystem CrashReport_SystemInfo::OperatingSystem_MAX;
const int CrashReport_SystemInfo::OperatingSystem_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CrashReport_SystemInfo::kOperatingSystemFieldNumber;
const int CrashReport_SystemInfo::kOsVersionFieldNumber;
const int CrashReport_SystemInfo::kArchitectureFieldNumber;
const int CrashReport_SystemInfo::kTimestampFieldNumber;
const int CrashReport_SystemInfo::kOsBuildFieldNumber;
#endif  // !_MSC_VER

CrashReport_SystemInfo::CrashReport_SystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_SystemInfo::InitAsDefaultInstance() {
}

CrashReport_SystemInfo::CrashReport_SystemInfo(const CrashReport_SystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_SystemInfo::SharedCtor() {
  _cached_size_ = 0;
  operating_system_ = 3;
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  architecture_ = 6;
  timestamp_ = GOOGLE_LONGLONG(0);
  os_build_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_SystemInfo::~CrashReport_SystemInfo() {
  SharedDtor();
}

void CrashReport_SystemInfo::SharedDtor() {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (os_build_ != &::google::protobuf::internal::kEmptyString) {
    delete os_build_;
  }
  if (this != default_instance_) {
  }
}

void CrashReport_SystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_SystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_SystemInfo_descriptor_;
}

const CrashReport_SystemInfo& CrashReport_SystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_SystemInfo* CrashReport_SystemInfo::default_instance_ = NULL;

CrashReport_SystemInfo* CrashReport_SystemInfo::New() const {
  return new CrashReport_SystemInfo;
}

void CrashReport_SystemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operating_system_ = 3;
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
    architecture_ = 6;
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_os_build()) {
      if (os_build_ != &::google::protobuf::internal::kEmptyString) {
        os_build_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_SystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plcrash.CrashReport.SystemInfo.OperatingSystem operating_system = 1 [default = OS_UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::plcrash::CrashReport_SystemInfo_OperatingSystem_IsValid(value)) {
            set_operating_system(static_cast< ::plcrash::CrashReport_SystemInfo_OperatingSystem >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_os_version;
        break;
      }
      
      // required string os_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_architecture;
        break;
      }
      
      // required .plcrash.Architecture architecture = 3 [default = ARCHITECTURE_UNKNOWN];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_architecture:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (plcrash::Architecture_IsValid(value)) {
            set_architecture(static_cast< plcrash::Architecture >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }
      
      // required int64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_os_build;
        break;
      }
      
      // optional string os_build = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_build:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_build()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_build().data(), this->os_build().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_SystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .plcrash.CrashReport.SystemInfo.OperatingSystem operating_system = 1 [default = OS_UNKNOWN];
  if (has_operating_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operating_system(), output);
  }
  
  // required string os_version = 2;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->os_version(), output);
  }
  
  // required .plcrash.Architecture architecture = 3 [default = ARCHITECTURE_UNKNOWN];
  if (has_architecture()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->architecture(), output);
  }
  
  // required int64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }
  
  // optional string os_build = 5;
  if (has_os_build()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_build().data(), this->os_build().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->os_build(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_SystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .plcrash.CrashReport.SystemInfo.OperatingSystem operating_system = 1 [default = OS_UNKNOWN];
  if (has_operating_system()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operating_system(), target);
  }
  
  // required string os_version = 2;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->os_version(), target);
  }
  
  // required .plcrash.Architecture architecture = 3 [default = ARCHITECTURE_UNKNOWN];
  if (has_architecture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->architecture(), target);
  }
  
  // required int64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }
  
  // optional string os_build = 5;
  if (has_os_build()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_build().data(), this->os_build().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->os_build(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_SystemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .plcrash.CrashReport.SystemInfo.OperatingSystem operating_system = 1 [default = OS_UNKNOWN];
    if (has_operating_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operating_system());
    }
    
    // required string os_version = 2;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }
    
    // required .plcrash.Architecture architecture = 3 [default = ARCHITECTURE_UNKNOWN];
    if (has_architecture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->architecture());
    }
    
    // required int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // optional string os_build = 5;
    if (has_os_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_build());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_SystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_SystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_SystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_SystemInfo::MergeFrom(const CrashReport_SystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operating_system()) {
      set_operating_system(from.operating_system());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_architecture()) {
      set_architecture(from.architecture());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_os_build()) {
      set_os_build(from.os_build());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_SystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_SystemInfo::CopyFrom(const CrashReport_SystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_SystemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void CrashReport_SystemInfo::Swap(CrashReport_SystemInfo* other) {
  if (other != this) {
    std::swap(operating_system_, other->operating_system_);
    std::swap(os_version_, other->os_version_);
    std::swap(architecture_, other->architecture_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(os_build_, other->os_build_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_SystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_SystemInfo_descriptor_;
  metadata.reflection = CrashReport_SystemInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CrashReport_ApplicationInfo::kIdentifierFieldNumber;
const int CrashReport_ApplicationInfo::kVersionFieldNumber;
#endif  // !_MSC_VER

CrashReport_ApplicationInfo::CrashReport_ApplicationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_ApplicationInfo::InitAsDefaultInstance() {
}

CrashReport_ApplicationInfo::CrashReport_ApplicationInfo(const CrashReport_ApplicationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_ApplicationInfo::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_ApplicationInfo::~CrashReport_ApplicationInfo() {
  SharedDtor();
}

void CrashReport_ApplicationInfo::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void CrashReport_ApplicationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_ApplicationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_ApplicationInfo_descriptor_;
}

const CrashReport_ApplicationInfo& CrashReport_ApplicationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_ApplicationInfo* CrashReport_ApplicationInfo::default_instance_ = NULL;

CrashReport_ApplicationInfo* CrashReport_ApplicationInfo::New() const {
  return new CrashReport_ApplicationInfo;
}

void CrashReport_ApplicationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_ApplicationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }
      
      // required string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_ApplicationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->identifier(), output);
  }
  
  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_ApplicationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }
  
  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_ApplicationInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
    // required string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_ApplicationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_ApplicationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_ApplicationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_ApplicationInfo::MergeFrom(const CrashReport_ApplicationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_ApplicationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_ApplicationInfo::CopyFrom(const CrashReport_ApplicationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_ApplicationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CrashReport_ApplicationInfo::Swap(CrashReport_ApplicationInfo* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_ApplicationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_ApplicationInfo_descriptor_;
  metadata.reflection = CrashReport_ApplicationInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CrashReport_Thread_StackFrame::kPcFieldNumber;
const int CrashReport_Thread_StackFrame::kSymbolFieldNumber;
#endif  // !_MSC_VER

CrashReport_Thread_StackFrame::CrashReport_Thread_StackFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_Thread_StackFrame::InitAsDefaultInstance() {
}

CrashReport_Thread_StackFrame::CrashReport_Thread_StackFrame(const CrashReport_Thread_StackFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_Thread_StackFrame::SharedCtor() {
  _cached_size_ = 0;
  pc_ = GOOGLE_ULONGLONG(0);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_Thread_StackFrame::~CrashReport_Thread_StackFrame() {
  SharedDtor();
}

void CrashReport_Thread_StackFrame::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void CrashReport_Thread_StackFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_Thread_StackFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_Thread_StackFrame_descriptor_;
}

const CrashReport_Thread_StackFrame& CrashReport_Thread_StackFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_Thread_StackFrame* CrashReport_Thread_StackFrame::default_instance_ = NULL;

CrashReport_Thread_StackFrame* CrashReport_Thread_StackFrame::New() const {
  return new CrashReport_Thread_StackFrame;
}

void CrashReport_Thread_StackFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pc_ = GOOGLE_ULONGLONG(0);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_Thread_StackFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 pc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pc_)));
          set_has_pc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_symbol;
        break;
      }
      
      // optional string symbol = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_Thread_StackFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 pc = 3;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pc(), output);
  }
  
  // optional string symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->symbol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_Thread_StackFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 pc = 3;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pc(), target);
  }
  
  // optional string symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_Thread_StackFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 pc = 3;
    if (has_pc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pc());
    }
    
    // optional string symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_Thread_StackFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_Thread_StackFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_Thread_StackFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_Thread_StackFrame::MergeFrom(const CrashReport_Thread_StackFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pc()) {
      set_pc(from.pc());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_Thread_StackFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_Thread_StackFrame::CopyFrom(const CrashReport_Thread_StackFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_Thread_StackFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CrashReport_Thread_StackFrame::Swap(CrashReport_Thread_StackFrame* other) {
  if (other != this) {
    std::swap(pc_, other->pc_);
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_Thread_StackFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_Thread_StackFrame_descriptor_;
  metadata.reflection = CrashReport_Thread_StackFrame_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CrashReport_Thread_RegisterValue::kNameFieldNumber;
const int CrashReport_Thread_RegisterValue::kValueFieldNumber;
#endif  // !_MSC_VER

CrashReport_Thread_RegisterValue::CrashReport_Thread_RegisterValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_Thread_RegisterValue::InitAsDefaultInstance() {
}

CrashReport_Thread_RegisterValue::CrashReport_Thread_RegisterValue(const CrashReport_Thread_RegisterValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_Thread_RegisterValue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_Thread_RegisterValue::~CrashReport_Thread_RegisterValue() {
  SharedDtor();
}

void CrashReport_Thread_RegisterValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CrashReport_Thread_RegisterValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_Thread_RegisterValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_Thread_RegisterValue_descriptor_;
}

const CrashReport_Thread_RegisterValue& CrashReport_Thread_RegisterValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_Thread_RegisterValue* CrashReport_Thread_RegisterValue::default_instance_ = NULL;

CrashReport_Thread_RegisterValue* CrashReport_Thread_RegisterValue::New() const {
  return new CrashReport_Thread_RegisterValue;
}

void CrashReport_Thread_RegisterValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_Thread_RegisterValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_Thread_RegisterValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_Thread_RegisterValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_Thread_RegisterValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_Thread_RegisterValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_Thread_RegisterValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_Thread_RegisterValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_Thread_RegisterValue::MergeFrom(const CrashReport_Thread_RegisterValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_Thread_RegisterValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_Thread_RegisterValue::CopyFrom(const CrashReport_Thread_RegisterValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_Thread_RegisterValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CrashReport_Thread_RegisterValue::Swap(CrashReport_Thread_RegisterValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_Thread_RegisterValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_Thread_RegisterValue_descriptor_;
  metadata.reflection = CrashReport_Thread_RegisterValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CrashReport_Thread::kThreadNumberFieldNumber;
const int CrashReport_Thread::kFramesFieldNumber;
const int CrashReport_Thread::kCrashedFieldNumber;
const int CrashReport_Thread::kRegistersFieldNumber;
#endif  // !_MSC_VER

CrashReport_Thread::CrashReport_Thread()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_Thread::InitAsDefaultInstance() {
}

CrashReport_Thread::CrashReport_Thread(const CrashReport_Thread& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_Thread::SharedCtor() {
  _cached_size_ = 0;
  thread_number_ = 0u;
  crashed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_Thread::~CrashReport_Thread() {
  SharedDtor();
}

void CrashReport_Thread::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrashReport_Thread::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_Thread::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_Thread_descriptor_;
}

const CrashReport_Thread& CrashReport_Thread::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_Thread* CrashReport_Thread::default_instance_ = NULL;

CrashReport_Thread* CrashReport_Thread::New() const {
  return new CrashReport_Thread;
}

void CrashReport_Thread::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    thread_number_ = 0u;
    crashed_ = false;
  }
  frames_.Clear();
  registers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_Thread::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 thread_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_number_)));
          set_has_thread_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        break;
      }
      
      // repeated .plcrash.CrashReport.Thread.StackFrame frames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        if (input->ExpectTag(24)) goto parse_crashed;
        break;
      }
      
      // required bool crashed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crashed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crashed_)));
          set_has_crashed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_registers;
        break;
      }
      
      // repeated .plcrash.CrashReport.Thread.RegisterValue registers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_registers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_registers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_Thread::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 thread_number = 1;
  if (has_thread_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thread_number(), output);
  }
  
  // repeated .plcrash.CrashReport.Thread.StackFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frames(i), output);
  }
  
  // required bool crashed = 3;
  if (has_crashed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->crashed(), output);
  }
  
  // repeated .plcrash.CrashReport.Thread.RegisterValue registers = 4;
  for (int i = 0; i < this->registers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->registers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_Thread::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 thread_number = 1;
  if (has_thread_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thread_number(), target);
  }
  
  // repeated .plcrash.CrashReport.Thread.StackFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frames(i), target);
  }
  
  // required bool crashed = 3;
  if (has_crashed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->crashed(), target);
  }
  
  // repeated .plcrash.CrashReport.Thread.RegisterValue registers = 4;
  for (int i = 0; i < this->registers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->registers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_Thread::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 thread_number = 1;
    if (has_thread_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_number());
    }
    
    // required bool crashed = 3;
    if (has_crashed()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .plcrash.CrashReport.Thread.StackFrame frames = 2;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }
  
  // repeated .plcrash.CrashReport.Thread.RegisterValue registers = 4;
  total_size += 1 * this->registers_size();
  for (int i = 0; i < this->registers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->registers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_Thread::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_Thread* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_Thread*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_Thread::MergeFrom(const CrashReport_Thread& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  registers_.MergeFrom(from.registers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thread_number()) {
      set_thread_number(from.thread_number());
    }
    if (from.has_crashed()) {
      set_crashed(from.crashed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_Thread::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_Thread::CopyFrom(const CrashReport_Thread& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_Thread::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  for (int i = 0; i < registers_size(); i++) {
    if (!this->registers(i).IsInitialized()) return false;
  }
  return true;
}

void CrashReport_Thread::Swap(CrashReport_Thread* other) {
  if (other != this) {
    std::swap(thread_number_, other->thread_number_);
    frames_.Swap(&other->frames_);
    std::swap(crashed_, other->crashed_);
    registers_.Swap(&other->registers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_Thread::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_Thread_descriptor_;
  metadata.reflection = CrashReport_Thread_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CrashReport_BinaryImage::kBaseAddressFieldNumber;
const int CrashReport_BinaryImage::kSizeFieldNumber;
const int CrashReport_BinaryImage::kNameFieldNumber;
const int CrashReport_BinaryImage::kUuidFieldNumber;
const int CrashReport_BinaryImage::kCodeTypeFieldNumber;
#endif  // !_MSC_VER

CrashReport_BinaryImage::CrashReport_BinaryImage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_BinaryImage::InitAsDefaultInstance() {
  code_type_ = const_cast< ::plcrash::CrashReport_Processor*>(&::plcrash::CrashReport_Processor::default_instance());
}

CrashReport_BinaryImage::CrashReport_BinaryImage(const CrashReport_BinaryImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_BinaryImage::SharedCtor() {
  _cached_size_ = 0;
  base_address_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_type_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_BinaryImage::~CrashReport_BinaryImage() {
  SharedDtor();
}

void CrashReport_BinaryImage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete code_type_;
  }
}

void CrashReport_BinaryImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_BinaryImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_BinaryImage_descriptor_;
}

const CrashReport_BinaryImage& CrashReport_BinaryImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_BinaryImage* CrashReport_BinaryImage::default_instance_ = NULL;

CrashReport_BinaryImage* CrashReport_BinaryImage::New() const {
  return new CrashReport_BinaryImage;
}

void CrashReport_BinaryImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_address_ = GOOGLE_ULONGLONG(0);
    size_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_code_type()) {
      if (code_type_ != NULL) code_type_->::plcrash::CrashReport_Processor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_BinaryImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 base_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_address_)));
          set_has_base_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // required uint64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }
      
      // optional bytes uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_code_type;
        break;
      }
      
      // optional .plcrash.CrashReport.Processor code_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_code_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_BinaryImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 base_address = 1;
  if (has_base_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->base_address(), output);
  }
  
  // required uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional bytes uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->uuid(), output);
  }
  
  // optional .plcrash.CrashReport.Processor code_type = 5;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->code_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_BinaryImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 base_address = 1;
  if (has_base_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->base_address(), target);
  }
  
  // required uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional bytes uuid = 4;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->uuid(), target);
  }
  
  // optional .plcrash.CrashReport.Processor code_type = 5;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->code_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_BinaryImage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 base_address = 1;
    if (has_base_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_address());
    }
    
    // required uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bytes uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }
    
    // optional .plcrash.CrashReport.Processor code_type = 5;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->code_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_BinaryImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_BinaryImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_BinaryImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_BinaryImage::MergeFrom(const CrashReport_BinaryImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_address()) {
      set_base_address(from.base_address());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_code_type()) {
      mutable_code_type()->::plcrash::CrashReport_Processor::MergeFrom(from.code_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_BinaryImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_BinaryImage::CopyFrom(const CrashReport_BinaryImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_BinaryImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_code_type()) {
    if (!this->code_type().IsInitialized()) return false;
  }
  return true;
}

void CrashReport_BinaryImage::Swap(CrashReport_BinaryImage* other) {
  if (other != this) {
    std::swap(base_address_, other->base_address_);
    std::swap(size_, other->size_);
    std::swap(name_, other->name_);
    std::swap(uuid_, other->uuid_);
    std::swap(code_type_, other->code_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_BinaryImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_BinaryImage_descriptor_;
  metadata.reflection = CrashReport_BinaryImage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CrashReport_Exception::kNameFieldNumber;
const int CrashReport_Exception::kReasonFieldNumber;
const int CrashReport_Exception::kFramesFieldNumber;
#endif  // !_MSC_VER

CrashReport_Exception::CrashReport_Exception()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_Exception::InitAsDefaultInstance() {
}

CrashReport_Exception::CrashReport_Exception(const CrashReport_Exception& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_Exception::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_Exception::~CrashReport_Exception() {
  SharedDtor();
}

void CrashReport_Exception::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void CrashReport_Exception::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_Exception::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_Exception_descriptor_;
}

const CrashReport_Exception& CrashReport_Exception::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_Exception* CrashReport_Exception::default_instance_ = NULL;

CrashReport_Exception* CrashReport_Exception::New() const {
  return new CrashReport_Exception;
}

void CrashReport_Exception::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_Exception::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }
      
      // required string reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_frames;
        break;
      }
      
      // repeated .plcrash.CrashReport.Thread.StackFrame frames = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_Exception::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reason(), output);
  }
  
  // repeated .plcrash.CrashReport.Thread.StackFrame frames = 3;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->frames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_Exception::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }
  
  // repeated .plcrash.CrashReport.Thread.StackFrame frames = 3;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->frames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_Exception::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }
    
  }
  // repeated .plcrash.CrashReport.Thread.StackFrame frames = 3;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_Exception::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_Exception* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_Exception*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_Exception::MergeFrom(const CrashReport_Exception& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_Exception::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_Exception::CopyFrom(const CrashReport_Exception& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_Exception::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void CrashReport_Exception::Swap(CrashReport_Exception* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(reason_, other->reason_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_Exception::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_Exception_descriptor_;
  metadata.reflection = CrashReport_Exception_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CrashReport_Signal::kNameFieldNumber;
const int CrashReport_Signal::kCodeFieldNumber;
const int CrashReport_Signal::kAddressFieldNumber;
#endif  // !_MSC_VER

CrashReport_Signal::CrashReport_Signal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_Signal::InitAsDefaultInstance() {
}

CrashReport_Signal::CrashReport_Signal(const CrashReport_Signal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_Signal::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_Signal::~CrashReport_Signal() {
  SharedDtor();
}

void CrashReport_Signal::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void CrashReport_Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_Signal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_Signal_descriptor_;
}

const CrashReport_Signal& CrashReport_Signal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_Signal* CrashReport_Signal::default_instance_ = NULL;

CrashReport_Signal* CrashReport_Signal::New() const {
  return new CrashReport_Signal;
}

void CrashReport_Signal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    address_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }
      
      // required string code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_address;
        break;
      }
      
      // required uint64 address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->code(), output);
  }
  
  // required uint64 address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->address(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_Signal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }
  
  // required uint64 address = 3;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->address(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_Signal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
    // required uint64 address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_Signal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_Signal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_Signal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_Signal::MergeFrom(const CrashReport_Signal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_Signal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_Signal::CopyFrom(const CrashReport_Signal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_Signal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CrashReport_Signal::Swap(CrashReport_Signal* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(code_, other->code_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_Signal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_Signal_descriptor_;
  metadata.reflection = CrashReport_Signal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CrashReport_ProcessInfo::kProcessNameFieldNumber;
const int CrashReport_ProcessInfo::kProcessIdFieldNumber;
const int CrashReport_ProcessInfo::kProcessPathFieldNumber;
const int CrashReport_ProcessInfo::kParentProcessNameFieldNumber;
const int CrashReport_ProcessInfo::kParentProcessIdFieldNumber;
const int CrashReport_ProcessInfo::kNativeFieldNumber;
#endif  // !_MSC_VER

CrashReport_ProcessInfo::CrashReport_ProcessInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_ProcessInfo::InitAsDefaultInstance() {
}

CrashReport_ProcessInfo::CrashReport_ProcessInfo(const CrashReport_ProcessInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_ProcessInfo::SharedCtor() {
  _cached_size_ = 0;
  process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_id_ = 0u;
  process_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_process_id_ = 0u;
  native_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_ProcessInfo::~CrashReport_ProcessInfo() {
  SharedDtor();
}

void CrashReport_ProcessInfo::SharedDtor() {
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    delete process_name_;
  }
  if (process_path_ != &::google::protobuf::internal::kEmptyString) {
    delete process_path_;
  }
  if (parent_process_name_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_process_name_;
  }
  if (this != default_instance_) {
  }
}

void CrashReport_ProcessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_ProcessInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_ProcessInfo_descriptor_;
}

const CrashReport_ProcessInfo& CrashReport_ProcessInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_ProcessInfo* CrashReport_ProcessInfo::default_instance_ = NULL;

CrashReport_ProcessInfo* CrashReport_ProcessInfo::New() const {
  return new CrashReport_ProcessInfo;
}

void CrashReport_ProcessInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_process_name()) {
      if (process_name_ != &::google::protobuf::internal::kEmptyString) {
        process_name_->clear();
      }
    }
    process_id_ = 0u;
    if (has_process_path()) {
      if (process_path_ != &::google::protobuf::internal::kEmptyString) {
        process_path_->clear();
      }
    }
    if (has_parent_process_name()) {
      if (parent_process_name_ != &::google::protobuf::internal::kEmptyString) {
        parent_process_name_->clear();
      }
    }
    parent_process_id_ = 0u;
    native_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_ProcessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string process_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_process_id;
        break;
      }
      
      // required uint32 process_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_process_path;
        break;
      }
      
      // optional string process_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_path().data(), this->process_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parent_process_name;
        break;
      }
      
      // optional string parent_process_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_process_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parent_process_name().data(), this->parent_process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parent_process_id;
        break;
      }
      
      // required uint32 parent_process_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_process_id_)));
          set_has_parent_process_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_native;
        break;
      }
      
      // required bool native = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_native:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &native_)));
          set_has_native();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_ProcessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string process_name = 1;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->process_name(), output);
  }
  
  // required uint32 process_id = 2;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->process_id(), output);
  }
  
  // optional string process_path = 3;
  if (has_process_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_path().data(), this->process_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->process_path(), output);
  }
  
  // optional string parent_process_name = 4;
  if (has_parent_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent_process_name().data(), this->parent_process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->parent_process_name(), output);
  }
  
  // required uint32 parent_process_id = 5;
  if (has_parent_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->parent_process_id(), output);
  }
  
  // required bool native = 6;
  if (has_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->native(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_ProcessInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string process_name = 1;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->process_name(), target);
  }
  
  // required uint32 process_id = 2;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->process_id(), target);
  }
  
  // optional string process_path = 3;
  if (has_process_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_path().data(), this->process_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->process_path(), target);
  }
  
  // optional string parent_process_name = 4;
  if (has_parent_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent_process_name().data(), this->parent_process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parent_process_name(), target);
  }
  
  // required uint32 parent_process_id = 5;
  if (has_parent_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->parent_process_id(), target);
  }
  
  // required bool native = 6;
  if (has_native()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->native(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_ProcessInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string process_name = 1;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }
    
    // required uint32 process_id = 2;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }
    
    // optional string process_path = 3;
    if (has_process_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_path());
    }
    
    // optional string parent_process_name = 4;
    if (has_parent_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_process_name());
    }
    
    // required uint32 parent_process_id = 5;
    if (has_parent_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_process_id());
    }
    
    // required bool native = 6;
    if (has_native()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_ProcessInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_ProcessInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_ProcessInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_ProcessInfo::MergeFrom(const CrashReport_ProcessInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process_name()) {
      set_process_name(from.process_name());
    }
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
    if (from.has_process_path()) {
      set_process_path(from.process_path());
    }
    if (from.has_parent_process_name()) {
      set_parent_process_name(from.parent_process_name());
    }
    if (from.has_parent_process_id()) {
      set_parent_process_id(from.parent_process_id());
    }
    if (from.has_native()) {
      set_native(from.native());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_ProcessInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_ProcessInfo::CopyFrom(const CrashReport_ProcessInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_ProcessInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000032) != 0x00000032) return false;
  
  return true;
}

void CrashReport_ProcessInfo::Swap(CrashReport_ProcessInfo* other) {
  if (other != this) {
    std::swap(process_name_, other->process_name_);
    std::swap(process_id_, other->process_id_);
    std::swap(process_path_, other->process_path_);
    std::swap(parent_process_name_, other->parent_process_name_);
    std::swap(parent_process_id_, other->parent_process_id_);
    std::swap(native_, other->native_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_ProcessInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_ProcessInfo_descriptor_;
  metadata.reflection = CrashReport_ProcessInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CrashReport_MachineInfo::kModelFieldNumber;
const int CrashReport_MachineInfo::kProcessorFieldNumber;
const int CrashReport_MachineInfo::kProcessorCountFieldNumber;
const int CrashReport_MachineInfo::kLogicalProcessorCountFieldNumber;
#endif  // !_MSC_VER

CrashReport_MachineInfo::CrashReport_MachineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport_MachineInfo::InitAsDefaultInstance() {
  processor_ = const_cast< ::plcrash::CrashReport_Processor*>(&::plcrash::CrashReport_Processor::default_instance());
}

CrashReport_MachineInfo::CrashReport_MachineInfo(const CrashReport_MachineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport_MachineInfo::SharedCtor() {
  _cached_size_ = 0;
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processor_ = NULL;
  processor_count_ = 0u;
  logical_processor_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport_MachineInfo::~CrashReport_MachineInfo() {
  SharedDtor();
}

void CrashReport_MachineInfo::SharedDtor() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (this != default_instance_) {
    delete processor_;
  }
}

void CrashReport_MachineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport_MachineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_MachineInfo_descriptor_;
}

const CrashReport_MachineInfo& CrashReport_MachineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport_MachineInfo* CrashReport_MachineInfo::default_instance_ = NULL;

CrashReport_MachineInfo* CrashReport_MachineInfo::New() const {
  return new CrashReport_MachineInfo;
}

void CrashReport_MachineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    if (has_processor()) {
      if (processor_ != NULL) processor_->::plcrash::CrashReport_Processor::Clear();
    }
    processor_count_ = 0u;
    logical_processor_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport_MachineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_processor;
        break;
      }
      
      // required .plcrash.CrashReport.Processor processor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_processor_count;
        break;
      }
      
      // required uint32 processor_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processor_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &processor_count_)));
          set_has_processor_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logical_processor_count;
        break;
      }
      
      // required uint32 logical_processor_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logical_processor_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logical_processor_count_)));
          set_has_logical_processor_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport_MachineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model(), output);
  }
  
  // required .plcrash.CrashReport.Processor processor = 2;
  if (has_processor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->processor(), output);
  }
  
  // required uint32 processor_count = 3;
  if (has_processor_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->processor_count(), output);
  }
  
  // required uint32 logical_processor_count = 4;
  if (has_logical_processor_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->logical_processor_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport_MachineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model(), target);
  }
  
  // required .plcrash.CrashReport.Processor processor = 2;
  if (has_processor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->processor(), target);
  }
  
  // required uint32 processor_count = 3;
  if (has_processor_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->processor_count(), target);
  }
  
  // required uint32 logical_processor_count = 4;
  if (has_logical_processor_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->logical_processor_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport_MachineInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }
    
    // required .plcrash.CrashReport.Processor processor = 2;
    if (has_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processor());
    }
    
    // required uint32 processor_count = 3;
    if (has_processor_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->processor_count());
    }
    
    // required uint32 logical_processor_count = 4;
    if (has_logical_processor_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logical_processor_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport_MachineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport_MachineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport_MachineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport_MachineInfo::MergeFrom(const CrashReport_MachineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_processor()) {
      mutable_processor()->::plcrash::CrashReport_Processor::MergeFrom(from.processor());
    }
    if (from.has_processor_count()) {
      set_processor_count(from.processor_count());
    }
    if (from.has_logical_processor_count()) {
      set_logical_processor_count(from.logical_processor_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport_MachineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport_MachineInfo::CopyFrom(const CrashReport_MachineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport_MachineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  if (has_processor()) {
    if (!this->processor().IsInitialized()) return false;
  }
  return true;
}

void CrashReport_MachineInfo::Swap(CrashReport_MachineInfo* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    std::swap(processor_, other->processor_);
    std::swap(processor_count_, other->processor_count_);
    std::swap(logical_processor_count_, other->logical_processor_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport_MachineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_MachineInfo_descriptor_;
  metadata.reflection = CrashReport_MachineInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CrashReport::kSystemInfoFieldNumber;
const int CrashReport::kApplicationInfoFieldNumber;
const int CrashReport::kThreadsFieldNumber;
const int CrashReport::kBinaryImagesFieldNumber;
const int CrashReport::kExceptionFieldNumber;
const int CrashReport::kSignalFieldNumber;
const int CrashReport::kProcessInfoFieldNumber;
const int CrashReport::kMachineInfoFieldNumber;
#endif  // !_MSC_VER

CrashReport::CrashReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrashReport::InitAsDefaultInstance() {
  system_info_ = const_cast< ::plcrash::CrashReport_SystemInfo*>(&::plcrash::CrashReport_SystemInfo::default_instance());
  application_info_ = const_cast< ::plcrash::CrashReport_ApplicationInfo*>(&::plcrash::CrashReport_ApplicationInfo::default_instance());
  exception_ = const_cast< ::plcrash::CrashReport_Exception*>(&::plcrash::CrashReport_Exception::default_instance());
  signal_ = const_cast< ::plcrash::CrashReport_Signal*>(&::plcrash::CrashReport_Signal::default_instance());
  process_info_ = const_cast< ::plcrash::CrashReport_ProcessInfo*>(&::plcrash::CrashReport_ProcessInfo::default_instance());
  machine_info_ = const_cast< ::plcrash::CrashReport_MachineInfo*>(&::plcrash::CrashReport_MachineInfo::default_instance());
}

CrashReport::CrashReport(const CrashReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrashReport::SharedCtor() {
  _cached_size_ = 0;
  system_info_ = NULL;
  application_info_ = NULL;
  exception_ = NULL;
  signal_ = NULL;
  process_info_ = NULL;
  machine_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashReport::~CrashReport() {
  SharedDtor();
}

void CrashReport::SharedDtor() {
  if (this != default_instance_) {
    delete system_info_;
    delete application_info_;
    delete exception_;
    delete signal_;
    delete process_info_;
    delete machine_info_;
  }
}

void CrashReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashReport_descriptor_;
}

const CrashReport& CrashReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrashReporter_2fcrash_5freport_2eproto();  return *default_instance_;
}

CrashReport* CrashReport::default_instance_ = NULL;

CrashReport* CrashReport::New() const {
  return new CrashReport;
}

void CrashReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_system_info()) {
      if (system_info_ != NULL) system_info_->::plcrash::CrashReport_SystemInfo::Clear();
    }
    if (has_application_info()) {
      if (application_info_ != NULL) application_info_->::plcrash::CrashReport_ApplicationInfo::Clear();
    }
    if (has_exception()) {
      if (exception_ != NULL) exception_->::plcrash::CrashReport_Exception::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::plcrash::CrashReport_Signal::Clear();
    }
    if (has_process_info()) {
      if (process_info_ != NULL) process_info_->::plcrash::CrashReport_ProcessInfo::Clear();
    }
    if (has_machine_info()) {
      if (machine_info_ != NULL) machine_info_->::plcrash::CrashReport_MachineInfo::Clear();
    }
  }
  threads_.Clear();
  binary_images_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrashReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .plcrash.CrashReport.SystemInfo system_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_application_info;
        break;
      }
      
      // required .plcrash.CrashReport.ApplicationInfo application_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_threads;
        break;
      }
      
      // repeated .plcrash.CrashReport.Thread threads = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_threads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_threads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_threads;
        if (input->ExpectTag(34)) goto parse_binary_images;
        break;
      }
      
      // repeated .plcrash.CrashReport.BinaryImage binary_images = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_binary_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_binary_images;
        if (input->ExpectTag(42)) goto parse_exception;
        break;
      }
      
      // optional .plcrash.CrashReport.Exception exception = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_signal;
        break;
      }
      
      // required .plcrash.CrashReport.Signal signal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_process_info;
        break;
      }
      
      // optional .plcrash.CrashReport.ProcessInfo process_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_machine_info;
        break;
      }
      
      // optional .plcrash.CrashReport.MachineInfo machine_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrashReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .plcrash.CrashReport.SystemInfo system_info = 1;
  if (has_system_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->system_info(), output);
  }
  
  // required .plcrash.CrashReport.ApplicationInfo application_info = 2;
  if (has_application_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->application_info(), output);
  }
  
  // repeated .plcrash.CrashReport.Thread threads = 3;
  for (int i = 0; i < this->threads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->threads(i), output);
  }
  
  // repeated .plcrash.CrashReport.BinaryImage binary_images = 4;
  for (int i = 0; i < this->binary_images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->binary_images(i), output);
  }
  
  // optional .plcrash.CrashReport.Exception exception = 5;
  if (has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->exception(), output);
  }
  
  // required .plcrash.CrashReport.Signal signal = 6;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->signal(), output);
  }
  
  // optional .plcrash.CrashReport.ProcessInfo process_info = 7;
  if (has_process_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->process_info(), output);
  }
  
  // optional .plcrash.CrashReport.MachineInfo machine_info = 8;
  if (has_machine_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->machine_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrashReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .plcrash.CrashReport.SystemInfo system_info = 1;
  if (has_system_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->system_info(), target);
  }
  
  // required .plcrash.CrashReport.ApplicationInfo application_info = 2;
  if (has_application_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->application_info(), target);
  }
  
  // repeated .plcrash.CrashReport.Thread threads = 3;
  for (int i = 0; i < this->threads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->threads(i), target);
  }
  
  // repeated .plcrash.CrashReport.BinaryImage binary_images = 4;
  for (int i = 0; i < this->binary_images_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->binary_images(i), target);
  }
  
  // optional .plcrash.CrashReport.Exception exception = 5;
  if (has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->exception(), target);
  }
  
  // required .plcrash.CrashReport.Signal signal = 6;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->signal(), target);
  }
  
  // optional .plcrash.CrashReport.ProcessInfo process_info = 7;
  if (has_process_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->process_info(), target);
  }
  
  // optional .plcrash.CrashReport.MachineInfo machine_info = 8;
  if (has_machine_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->machine_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrashReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .plcrash.CrashReport.SystemInfo system_info = 1;
    if (has_system_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system_info());
    }
    
    // required .plcrash.CrashReport.ApplicationInfo application_info = 2;
    if (has_application_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_info());
    }
    
    // optional .plcrash.CrashReport.Exception exception = 5;
    if (has_exception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exception());
    }
    
    // required .plcrash.CrashReport.Signal signal = 6;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }
    
    // optional .plcrash.CrashReport.ProcessInfo process_info = 7;
    if (has_process_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->process_info());
    }
    
    // optional .plcrash.CrashReport.MachineInfo machine_info = 8;
    if (has_machine_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine_info());
    }
    
  }
  // repeated .plcrash.CrashReport.Thread threads = 3;
  total_size += 1 * this->threads_size();
  for (int i = 0; i < this->threads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->threads(i));
  }
  
  // repeated .plcrash.CrashReport.BinaryImage binary_images = 4;
  total_size += 1 * this->binary_images_size();
  for (int i = 0; i < this->binary_images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->binary_images(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrashReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrashReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrashReport::MergeFrom(const CrashReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  threads_.MergeFrom(from.threads_);
  binary_images_.MergeFrom(from.binary_images_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_system_info()) {
      mutable_system_info()->::plcrash::CrashReport_SystemInfo::MergeFrom(from.system_info());
    }
    if (from.has_application_info()) {
      mutable_application_info()->::plcrash::CrashReport_ApplicationInfo::MergeFrom(from.application_info());
    }
    if (from.has_exception()) {
      mutable_exception()->::plcrash::CrashReport_Exception::MergeFrom(from.exception());
    }
    if (from.has_signal()) {
      mutable_signal()->::plcrash::CrashReport_Signal::MergeFrom(from.signal());
    }
    if (from.has_process_info()) {
      mutable_process_info()->::plcrash::CrashReport_ProcessInfo::MergeFrom(from.process_info());
    }
    if (from.has_machine_info()) {
      mutable_machine_info()->::plcrash::CrashReport_MachineInfo::MergeFrom(from.machine_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrashReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashReport::CopyFrom(const CrashReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  
  if (has_system_info()) {
    if (!this->system_info().IsInitialized()) return false;
  }
  if (has_application_info()) {
    if (!this->application_info().IsInitialized()) return false;
  }
  for (int i = 0; i < threads_size(); i++) {
    if (!this->threads(i).IsInitialized()) return false;
  }
  for (int i = 0; i < binary_images_size(); i++) {
    if (!this->binary_images(i).IsInitialized()) return false;
  }
  if (has_exception()) {
    if (!this->exception().IsInitialized()) return false;
  }
  if (has_signal()) {
    if (!this->signal().IsInitialized()) return false;
  }
  if (has_process_info()) {
    if (!this->process_info().IsInitialized()) return false;
  }
  if (has_machine_info()) {
    if (!this->machine_info().IsInitialized()) return false;
  }
  return true;
}

void CrashReport::Swap(CrashReport* other) {
  if (other != this) {
    std::swap(system_info_, other->system_info_);
    std::swap(application_info_, other->application_info_);
    threads_.Swap(&other->threads_);
    binary_images_.Swap(&other->binary_images_);
    std::swap(exception_, other->exception_);
    std::swap(signal_, other->signal_);
    std::swap(process_info_, other->process_info_);
    std::swap(machine_info_, other->machine_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrashReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashReport_descriptor_;
  metadata.reflection = CrashReport_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace plcrash

// @@protoc_insertion_point(global_scope)
